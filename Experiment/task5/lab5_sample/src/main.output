Terminals unused in grammar

    BOOL
    K_DO
    LB
    RB
    LOWER_THEN_ELSE


State 119 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMI
    5          | K_SKIP SEMI
    6          | declaration SEMI
    7          | assignment SEMI
    8          | op_assignment SEMI
    9          | printf SEMI
   10          | scanf SEMI
   11          | if_else
   12          | while
   13          | for
   14          | function
   15          | return SEMI
   16          | LC statements RC

   17 declaration: T IDENTIFIER LOP_ASSIGN expr
   18            | T IDENTIFIER
   19            | declaration COMMA IDENTIFIER
   20            | declaration COMMA assignment

   21 assignment: IDENTIFIER LOP_ASSIGN expr

   22 op_assignment: IDENTIFIER LOP_ADDA expr
   23              | IDENTIFIER LOP_SUBA expr
   24              | IDENTIFIER LOP_ADAD
   25              | IDENTIFIER LOP_SBSB

   26 printf: F_PRINTF LP expr RP

   27 scanf: F_SCANF LP expr RP

   28 if_else: K_IF LP b_expr RP statement K_ELSE statement
   29        | K_IF LP b_expr RP statement

   30 while: K_WHILE LP b_expr RP statement

   31 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP statement

   32 function: T IDENTIFIER LP RP statement

   33 return: K_RETURN expr

   34 expr: IDENTIFIER
   35     | INTEGER
   36     | CHARS
   37     | STRINGS
   38     | expr LOP_ADD expr
   39     | expr LOP_SUB expr
   40     | expr LOP_MUL expr
   41     | expr LOP_DIV expr
   42     | expr LOP_REM expr
   43     | LP expr RP
   44     | LOP_ADD expr
   45     | LOP_SUB expr

   46 b_expr: expr LOP_EQ expr
   47       | expr LOP_LT expr
   48       | expr LOP_LE expr
   49       | expr LOP_GT expr
   50       | expr LOP_GE expr
   51       | expr LOP_NE expr
   52       | LOP_NOT b_expr
   53       | b_expr LOP_AND b_expr
   54       | b_expr LOP_OR b_expr
   55       | TRUE
   56       | FALSE

   57 T: T_INT
   58  | T_CHAR
   59  | T_BOOL
   60  | T_STRING
   61  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 17 18 19 21 22 23 24 25 32 34
    INTEGER (259) 35
    CHARS (260) 36
    BOOL (261)
    STRINGS (262) 37
    TRUE (263) 55
    FALSE (264) 56
    K_SKIP (265) 5
    K_WHILE (266) 30
    K_DO (267)
    K_FOR (268) 31
    K_IF (269) 28 29
    K_ELSE (270) 28
    K_RETURN (271) 33
    F_SCANF (272) 27
    F_PRINTF (273) 26
    T_CHAR (274) 58
    T_INT (275) 57
    T_STRING (276) 60
    T_BOOL (277) 59
    T_VOID (278) 61
    LOP_ADD (279) 38 44
    LOP_SUB (280) 39 45
    LOP_MUL (281) 40
    LOP_DIV (282) 41
    LOP_REM (283) 42
    LOP_AND (284) 53
    LOP_OR (285) 54
    LOP_NOT (286) 52
    LOP_EQ (287) 46
    LOP_LT (288) 47
    LOP_LE (289) 48
    LOP_GT (290) 49
    LOP_GE (291) 50
    LOP_NE (292) 51
    LOP_ASSIGN (293) 17 21
    LOP_ADDA (294) 22
    LOP_SUBA (295) 23
    LOP_ADAD (296) 24
    LOP_SBSB (297) 25
    SEMI (298) 4 5 6 7 8 9 10 15 31
    LP (299) 26 27 28 29 30 31 32 43
    RP (300) 26 27 28 29 30 31 32 43
    LB (301)
    RB (302)
    LC (303) 16
    RC (304) 16
    COMMA (305) 19 20
    MINUS (306)
    PLUS (307)
    LOWER_THEN_ELSE (308)


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    program (55)
        on left: 1
        on right: 0
    statements (56)
        on left: 2 3
        on right: 1 3 16
    statement (57)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16
        on right: 2 3 28 29 30 31 32
    declaration (58)
        on left: 17 18 19 20
        on right: 6 19 20 31
    assignment (59)
        on left: 21
        on right: 7 20 31
    op_assignment (60)
        on left: 22 23 24 25
        on right: 8
    printf (61)
        on left: 26
        on right: 9
    scanf (62)
        on left: 27
        on right: 10
    if_else (63)
        on left: 28 29
        on right: 11
    while (64)
        on left: 30
        on right: 12
    for (65)
        on left: 31
        on right: 13
    function (66)
        on left: 32
        on right: 14
    return (67)
        on left: 33
        on right: 15
    expr (68)
        on left: 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 17 21 22 23 26 27 33 38 39 40 41 42 43 44 45 46 47 48 49 50 51
    b_expr (69)
        on left: 46 47 48 49 50 51 52 53 54 55 56
        on right: 28 29 30 31 52 53 54
    T (70)
        on left: 57 58 59 60 61
        on right: 17 18 32


State 0

    0 $accept: . program $end

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    program        go to state 16
    statements     go to state 17
    statement      go to state 18
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 1

   21 assignment: IDENTIFIER . LOP_ASSIGN expr
   22 op_assignment: IDENTIFIER . LOP_ADDA expr
   23              | IDENTIFIER . LOP_SUBA expr
   24              | IDENTIFIER . LOP_ADAD
   25              | IDENTIFIER . LOP_SBSB

    LOP_ASSIGN  shift, and go to state 30
    LOP_ADDA    shift, and go to state 31
    LOP_SUBA    shift, and go to state 32
    LOP_ADAD    shift, and go to state 33
    LOP_SBSB    shift, and go to state 34


State 2

    5 statement: K_SKIP . SEMI

    SEMI  shift, and go to state 35


State 3

   30 while: K_WHILE . LP b_expr RP statement

    LP  shift, and go to state 36


State 4

   31 for: K_FOR . LP declaration SEMI b_expr SEMI assignment RP statement

    LP  shift, and go to state 37


State 5

   28 if_else: K_IF . LP b_expr RP statement K_ELSE statement
   29        | K_IF . LP b_expr RP statement

    LP  shift, and go to state 38


State 6

   33 return: K_RETURN . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 46


State 7

   27 scanf: F_SCANF . LP expr RP

    LP  shift, and go to state 47


State 8

   26 printf: F_PRINTF . LP expr RP

    LP  shift, and go to state 48


State 9

   58 T: T_CHAR .

    $default  reduce using rule 58 (T)


State 10

   57 T: T_INT .

    $default  reduce using rule 57 (T)


State 11

   60 T: T_STRING .

    $default  reduce using rule 60 (T)


State 12

   59 T: T_BOOL .

    $default  reduce using rule 59 (T)


State 13

   61 T: T_VOID .

    $default  reduce using rule 61 (T)


State 14

    4 statement: SEMI .

    $default  reduce using rule 4 (statement)


State 15

   16 statement: LC . statements RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statements     go to state 49
    statement      go to state 18
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 16

    0 $accept: program . $end

    $end  shift, and go to state 50


State 17

    1 program: statements .
    3 statements: statements . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    $default  reduce using rule 1 (program)

    statement      go to state 51
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 18

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 19

    6 statement: declaration . SEMI
   19 declaration: declaration . COMMA IDENTIFIER
   20            | declaration . COMMA assignment

    SEMI   shift, and go to state 52
    COMMA  shift, and go to state 53


State 20

    7 statement: assignment . SEMI

    SEMI  shift, and go to state 54


State 21

    8 statement: op_assignment . SEMI

    SEMI  shift, and go to state 55


State 22

    9 statement: printf . SEMI

    SEMI  shift, and go to state 56


State 23

   10 statement: scanf . SEMI

    SEMI  shift, and go to state 57


State 24

   11 statement: if_else .

    $default  reduce using rule 11 (statement)


State 25

   12 statement: while .

    $default  reduce using rule 12 (statement)


State 26

   13 statement: for .

    $default  reduce using rule 13 (statement)


State 27

   14 statement: function .

    $default  reduce using rule 14 (statement)


State 28

   15 statement: return . SEMI

    SEMI  shift, and go to state 58


State 29

   17 declaration: T . IDENTIFIER LOP_ASSIGN expr
   18            | T . IDENTIFIER
   32 function: T . IDENTIFIER LP RP statement

    IDENTIFIER  shift, and go to state 59


State 30

   21 assignment: IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 60


State 31

   22 op_assignment: IDENTIFIER LOP_ADDA . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 61


State 32

   23 op_assignment: IDENTIFIER LOP_SUBA . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 62


State 33

   24 op_assignment: IDENTIFIER LOP_ADAD .

    $default  reduce using rule 24 (op_assignment)


State 34

   25 op_assignment: IDENTIFIER LOP_SBSB .

    $default  reduce using rule 25 (op_assignment)


State 35

    5 statement: K_SKIP SEMI .

    $default  reduce using rule 5 (statement)


State 36

   30 while: K_WHILE LP . b_expr RP statement

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 67


State 37

   31 for: K_FOR LP . declaration SEMI b_expr SEMI assignment RP statement

    T_CHAR    shift, and go to state 9
    T_INT     shift, and go to state 10
    T_STRING  shift, and go to state 11
    T_BOOL    shift, and go to state 12
    T_VOID    shift, and go to state 13

    declaration  go to state 68
    T            go to state 69


State 38

   28 if_else: K_IF LP . b_expr RP statement K_ELSE statement
   29        | K_IF LP . b_expr RP statement

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 70


State 39

   34 expr: IDENTIFIER .

    $default  reduce using rule 34 (expr)


State 40

   35 expr: INTEGER .

    $default  reduce using rule 35 (expr)


State 41

   36 expr: CHARS .

    $default  reduce using rule 36 (expr)


State 42

   37 expr: STRINGS .

    $default  reduce using rule 37 (expr)


State 43

   44 expr: LOP_ADD . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 71


State 44

   45 expr: LOP_SUB . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 72


State 45

   43 expr: LP . expr RP

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 73


State 46

   33 return: K_RETURN expr .
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 33 (return)


State 47

   27 scanf: F_SCANF LP . expr RP

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 79


State 48

   26 printf: F_PRINTF LP . expr RP

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 80


State 49

    3 statements: statements . statement
   16 statement: LC statements . RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15
    RC          shift, and go to state 81

    statement      go to state 51
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 50

    0 $accept: program $end .

    $default  accept


State 51

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 52

    6 statement: declaration SEMI .

    $default  reduce using rule 6 (statement)


State 53

   19 declaration: declaration COMMA . IDENTIFIER
   20            | declaration COMMA . assignment

    IDENTIFIER  shift, and go to state 82

    assignment  go to state 83


State 54

    7 statement: assignment SEMI .

    $default  reduce using rule 7 (statement)


State 55

    8 statement: op_assignment SEMI .

    $default  reduce using rule 8 (statement)


State 56

    9 statement: printf SEMI .

    $default  reduce using rule 9 (statement)


State 57

   10 statement: scanf SEMI .

    $default  reduce using rule 10 (statement)


State 58

   15 statement: return SEMI .

    $default  reduce using rule 15 (statement)


State 59

   17 declaration: T IDENTIFIER . LOP_ASSIGN expr
   18            | T IDENTIFIER .
   32 function: T IDENTIFIER . LP RP statement

    LOP_ASSIGN  shift, and go to state 84
    LP          shift, and go to state 85

    $default  reduce using rule 18 (declaration)


State 60

   21 assignment: IDENTIFIER LOP_ASSIGN expr .
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 21 (assignment)


State 61

   22 op_assignment: IDENTIFIER LOP_ADDA expr .
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 22 (op_assignment)


State 62

   23 op_assignment: IDENTIFIER LOP_SUBA expr .
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 23 (op_assignment)


State 63

   55 b_expr: TRUE .

    $default  reduce using rule 55 (b_expr)


State 64

   56 b_expr: FALSE .

    $default  reduce using rule 56 (b_expr)


State 65

   52 b_expr: LOP_NOT . b_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 86


State 66

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   46 b_expr: expr . LOP_EQ expr
   47       | expr . LOP_LT expr
   48       | expr . LOP_LE expr
   49       | expr . LOP_GT expr
   50       | expr . LOP_GE expr
   51       | expr . LOP_NE expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78
    LOP_EQ   shift, and go to state 87
    LOP_LT   shift, and go to state 88
    LOP_LE   shift, and go to state 89
    LOP_GT   shift, and go to state 90
    LOP_GE   shift, and go to state 91
    LOP_NE   shift, and go to state 92


State 67

   30 while: K_WHILE LP b_expr . RP statement
   53 b_expr: b_expr . LOP_AND b_expr
   54       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 93
    LOP_OR   shift, and go to state 94
    RP       shift, and go to state 95


State 68

   19 declaration: declaration . COMMA IDENTIFIER
   20            | declaration . COMMA assignment
   31 for: K_FOR LP declaration . SEMI b_expr SEMI assignment RP statement

    SEMI   shift, and go to state 96
    COMMA  shift, and go to state 53


State 69

   17 declaration: T . IDENTIFIER LOP_ASSIGN expr
   18            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 97


State 70

   28 if_else: K_IF LP b_expr . RP statement K_ELSE statement
   29        | K_IF LP b_expr . RP statement
   53 b_expr: b_expr . LOP_AND b_expr
   54       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 93
    LOP_OR   shift, and go to state 94
    RP       shift, and go to state 98


State 71

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   44     | LOP_ADD expr .

    $default  reduce using rule 44 (expr)


State 72

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   45     | LOP_SUB expr .

    $default  reduce using rule 45 (expr)


State 73

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   43     | LP expr . RP

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78
    RP       shift, and go to state 99


State 74

   38 expr: expr LOP_ADD . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 100


State 75

   39 expr: expr LOP_SUB . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 101


State 76

   40 expr: expr LOP_MUL . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 102


State 77

   41 expr: expr LOP_DIV . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 103


State 78

   42 expr: expr LOP_REM . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 104


State 79

   27 scanf: F_SCANF LP expr . RP
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78
    RP       shift, and go to state 105


State 80

   26 printf: F_PRINTF LP expr . RP
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78
    RP       shift, and go to state 106


State 81

   16 statement: LC statements RC .

    $default  reduce using rule 16 (statement)


State 82

   19 declaration: declaration COMMA IDENTIFIER .
   21 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 30

    $default  reduce using rule 19 (declaration)


State 83

   20 declaration: declaration COMMA assignment .

    $default  reduce using rule 20 (declaration)


State 84

   17 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 107


State 85

   32 function: T IDENTIFIER LP . RP statement

    RP  shift, and go to state 108


State 86

   52 b_expr: LOP_NOT b_expr .
   53       | b_expr . LOP_AND b_expr
   54       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 93
    LOP_OR   shift, and go to state 94

    $default  reduce using rule 52 (b_expr)


State 87

   46 b_expr: expr LOP_EQ . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 109


State 88

   47 b_expr: expr LOP_LT . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 110


State 89

   48 b_expr: expr LOP_LE . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 111


State 90

   49 b_expr: expr LOP_GT . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 112


State 91

   50 b_expr: expr LOP_GE . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 113


State 92

   51 b_expr: expr LOP_NE . expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LP          shift, and go to state 45

    expr  go to state 114


State 93

   53 b_expr: b_expr LOP_AND . b_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 115


State 94

   54 b_expr: b_expr LOP_OR . b_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 116


State 95

   30 while: K_WHILE LP b_expr RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statement      go to state 117
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 96

   31 for: K_FOR LP declaration SEMI . b_expr SEMI assignment RP statement

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    CHARS       shift, and go to state 41
    STRINGS     shift, and go to state 42
    TRUE        shift, and go to state 63
    FALSE       shift, and go to state 64
    LOP_ADD     shift, and go to state 43
    LOP_SUB     shift, and go to state 44
    LOP_NOT     shift, and go to state 65
    LP          shift, and go to state 45

    expr    go to state 66
    b_expr  go to state 118


State 97

   17 declaration: T IDENTIFIER . LOP_ASSIGN expr
   18            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 84

    $default  reduce using rule 18 (declaration)


State 98

   28 if_else: K_IF LP b_expr RP . statement K_ELSE statement
   29        | K_IF LP b_expr RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statement      go to state 119
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 99

   43 expr: LP expr RP .

    $default  reduce using rule 43 (expr)


State 100

   38 expr: expr . LOP_ADD expr
   38     | expr LOP_ADD expr .
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    $default  reduce using rule 38 (expr)


State 101

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   39     | expr LOP_SUB expr .
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    $default  reduce using rule 39 (expr)


State 102

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   40     | expr LOP_MUL expr .
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75

    $default  reduce using rule 40 (expr)


State 103

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   41     | expr LOP_DIV expr .
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75

    $default  reduce using rule 41 (expr)


State 104

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   42     | expr LOP_REM expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75

    $default  reduce using rule 42 (expr)


State 105

   27 scanf: F_SCANF LP expr RP .

    $default  reduce using rule 27 (scanf)


State 106

   26 printf: F_PRINTF LP expr RP .

    $default  reduce using rule 26 (printf)


State 107

   17 declaration: T IDENTIFIER LOP_ASSIGN expr .
   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 17 (declaration)


State 108

   32 function: T IDENTIFIER LP RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statement      go to state 120
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 109

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   46 b_expr: expr LOP_EQ expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 46 (b_expr)


State 110

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   47 b_expr: expr LOP_LT expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 47 (b_expr)


State 111

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   48 b_expr: expr LOP_LE expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 48 (b_expr)


State 112

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   49 b_expr: expr LOP_GT expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 49 (b_expr)


State 113

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   50 b_expr: expr LOP_GE expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 50 (b_expr)


State 114

   38 expr: expr . LOP_ADD expr
   39     | expr . LOP_SUB expr
   40     | expr . LOP_MUL expr
   41     | expr . LOP_DIV expr
   42     | expr . LOP_REM expr
   51 b_expr: expr LOP_NE expr .

    LOP_ADD  shift, and go to state 74
    LOP_SUB  shift, and go to state 75
    LOP_MUL  shift, and go to state 76
    LOP_DIV  shift, and go to state 77
    LOP_REM  shift, and go to state 78

    $default  reduce using rule 51 (b_expr)


State 115

   53 b_expr: b_expr . LOP_AND b_expr
   53       | b_expr LOP_AND b_expr .
   54       | b_expr . LOP_OR b_expr

    $default  reduce using rule 53 (b_expr)


State 116

   53 b_expr: b_expr . LOP_AND b_expr
   54       | b_expr . LOP_OR b_expr
   54       | b_expr LOP_OR b_expr .

    $default  reduce using rule 54 (b_expr)


State 117

   30 while: K_WHILE LP b_expr RP statement .

    $default  reduce using rule 30 (while)


State 118

   31 for: K_FOR LP declaration SEMI b_expr . SEMI assignment RP statement
   53 b_expr: b_expr . LOP_AND b_expr
   54       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 93
    LOP_OR   shift, and go to state 94
    SEMI     shift, and go to state 121


State 119

   28 if_else: K_IF LP b_expr RP statement . K_ELSE statement
   29        | K_IF LP b_expr RP statement .

    K_ELSE  shift, and go to state 122

    K_ELSE    [reduce using rule 29 (if_else)]
    $default  reduce using rule 29 (if_else)


State 120

   32 function: T IDENTIFIER LP RP statement .

    $default  reduce using rule 32 (function)


State 121

   31 for: K_FOR LP declaration SEMI b_expr SEMI . assignment RP statement

    IDENTIFIER  shift, and go to state 123

    assignment  go to state 124


State 122

   28 if_else: K_IF LP b_expr RP statement K_ELSE . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statement      go to state 125
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 123

   21 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 30


State 124

   31 for: K_FOR LP declaration SEMI b_expr SEMI assignment . RP statement

    RP  shift, and go to state 126


State 125

   28 if_else: K_IF LP b_expr RP statement K_ELSE statement .

    $default  reduce using rule 28 (if_else)


State 126

   31 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_INT       shift, and go to state 10
    T_STRING    shift, and go to state 11
    T_BOOL      shift, and go to state 12
    T_VOID      shift, and go to state 13
    SEMI        shift, and go to state 14
    LC          shift, and go to state 15

    statement      go to state 127
    declaration    go to state 19
    assignment     go to state 20
    op_assignment  go to state 21
    printf         go to state 22
    scanf          go to state 23
    if_else        go to state 24
    while          go to state 25
    for            go to state 26
    function       go to state 27
    return         go to state 28
    T              go to state 29


State 127

   31 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP statement .

    $default  reduce using rule 31 (for)
