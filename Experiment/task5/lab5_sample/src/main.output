Terminals unused in grammar

    BOOL
    K_DO
    K_FOR
    K_RETURN
    LB
    RB


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMI
    5          | K_SKIP SEMI
    6          | declaration SEMI
    7          | assignment SEMI
    8          | printf SEMI
    9          | scanf SEMI
   10          | if_else
   11          | while
   12          | function
   13          | LC statements RC

   14 declaration: T idlist

   15 idlist: idlist COMMA IDENTIFIER
   16       | idlist COMMA assignment
   17       | IDENTIFIER
   18       | assignment

   19 assignment: IDENTIFIER LOP_ASSIGN expr

   20 printf: F_PRINTF LP expr RP

   21 scanf: F_SCANF LP expr RP

   22 if_else: K_IF LP b_expr RP statement
   23        | K_IF LP b_expr RP statement K_ELSE statement

   24 while: K_WHILE LP b_expr RP statement

   25 function: T IDENTIFIER LP RP statement

   26 expr: IDENTIFIER
   27     | INTEGER
   28     | CHARS
   29     | STRINGS
   30     | expr LOP_ADD expr
   31     | expr LOP_SUB expr
   32     | expr LOP_MUL expr
   33     | expr LOP_DIV expr
   34     | expr LOP_REM expr
   35     | LP expr RP
   36     | LOP_ADD expr
   37     | LOP_SUB expr

   38 b_expr: expr LOP_EQ expr
   39       | expr LOP_LT expr
   40       | expr LOP_LE expr
   41       | expr LOP_GT expr
   42       | expr LOP_GE expr
   43       | expr LOP_NE expr
   44       | b_expr LOP_AND b_expr
   45       | b_expr LOP_OR b_expr
   46       | LOP_NOT b_expr
   47       | TRUE
   48       | FALSE

   49 T: T_INT
   50  | T_CHAR
   51  | T_BOOL
   52  | T_STRING
   53  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 15 17 19 25 26
    INTEGER (259) 27
    CHARS (260) 28
    BOOL (261)
    STRINGS (262) 29
    TRUE (263) 47
    FALSE (264) 48
    K_SKIP (265) 5
    K_WHILE (266) 24
    K_DO (267)
    K_FOR (268)
    K_IF (269) 22 23
    K_ELSE (270) 23
    K_RETURN (271)
    F_SCANF (272) 21
    F_PRINTF (273) 20
    T_CHAR (274) 50
    T_INT (275) 49
    T_STRING (276) 52
    T_BOOL (277) 51
    T_VOID (278) 53
    LOP_ADD (279) 30 36
    LOP_SUB (280) 31 37
    LOP_MUL (281) 32
    LOP_DIV (282) 33
    LOP_REM (283) 34
    LOP_AND (284) 44
    LOP_OR (285) 45
    LOP_NOT (286) 46
    LOP_EQ (287) 38
    LOP_LT (288) 39
    LOP_LE (289) 40
    LOP_GT (290) 41
    LOP_GE (291) 42
    LOP_NE (292) 43
    LOP_ASSIGN (293) 19
    SEMI (294) 4 5 6 7 8 9
    LP (295) 20 21 22 23 24 25 35
    RP (296) 20 21 22 23 24 25 35
    LB (297)
    RB (298)
    LC (299) 13
    RC (300) 13
    COMMA (301) 15 16
    MINUS (302)
    PLUS (303)
    LOWER_THEN_ELSE (304)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    statements (52)
        on left: 2 3
        on right: 1 3 13
    statement (53)
        on left: 4 5 6 7 8 9 10 11 12 13
        on right: 2 3 22 23 24 25
    declaration (54)
        on left: 14
        on right: 6
    idlist (55)
        on left: 15 16 17 18
        on right: 14 15 16
    assignment (56)
        on left: 19
        on right: 7 16 18
    printf (57)
        on left: 20
        on right: 8
    scanf (58)
        on left: 21
        on right: 9
    if_else (59)
        on left: 22 23
        on right: 10
    while (60)
        on left: 24
        on right: 11
    function (61)
        on left: 25
        on right: 12
    expr (62)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37
        on right: 19 20 21 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    b_expr (63)
        on left: 38 39 40 41 42 43 44 45 46 47 48
        on right: 22 23 24 44 45 46
    T (64)
        on left: 49 50 51 52 53
        on right: 14 25


State 0

    0 $accept: . program $end

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    program      go to state 14
    statements   go to state 15
    statement    go to state 16
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 1

   19 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 25


State 2

    5 statement: K_SKIP . SEMI

    SEMI  shift, and go to state 26


State 3

   24 while: K_WHILE . LP b_expr RP statement

    LP  shift, and go to state 27


State 4

   22 if_else: K_IF . LP b_expr RP statement
   23        | K_IF . LP b_expr RP statement K_ELSE statement

    LP  shift, and go to state 28


State 5

   21 scanf: F_SCANF . LP expr RP

    LP  shift, and go to state 29


State 6

   20 printf: F_PRINTF . LP expr RP

    LP  shift, and go to state 30


State 7

   50 T: T_CHAR .

    $default  reduce using rule 50 (T)


State 8

   49 T: T_INT .

    $default  reduce using rule 49 (T)


State 9

   52 T: T_STRING .

    $default  reduce using rule 52 (T)


State 10

   51 T: T_BOOL .

    $default  reduce using rule 51 (T)


State 11

   53 T: T_VOID .

    $default  reduce using rule 53 (T)


State 12

    4 statement: SEMI .

    $default  reduce using rule 4 (statement)


State 13

   13 statement: LC . statements RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    statements   go to state 31
    statement    go to state 16
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 14

    0 $accept: program . $end

    $end  shift, and go to state 32


State 15

    1 program: statements .
    3 statements: statements . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    $default  reduce using rule 1 (program)

    statement    go to state 33
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 16

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 17

    6 statement: declaration . SEMI

    SEMI  shift, and go to state 34


State 18

    7 statement: assignment . SEMI

    SEMI  shift, and go to state 35


State 19

    8 statement: printf . SEMI

    SEMI  shift, and go to state 36


State 20

    9 statement: scanf . SEMI

    SEMI  shift, and go to state 37


State 21

   10 statement: if_else .

    $default  reduce using rule 10 (statement)


State 22

   11 statement: while .

    $default  reduce using rule 11 (statement)


State 23

   12 statement: function .

    $default  reduce using rule 12 (statement)


State 24

   14 declaration: T . idlist
   25 function: T . IDENTIFIER LP RP statement

    IDENTIFIER  shift, and go to state 38

    idlist      go to state 39
    assignment  go to state 40


State 25

   19 assignment: IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 48


State 26

    5 statement: K_SKIP SEMI .

    $default  reduce using rule 5 (statement)


State 27

   24 while: K_WHILE LP . b_expr RP statement

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    TRUE        shift, and go to state 49
    FALSE       shift, and go to state 50
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LOP_NOT     shift, and go to state 51
    LP          shift, and go to state 47

    expr    go to state 52
    b_expr  go to state 53


State 28

   22 if_else: K_IF LP . b_expr RP statement
   23        | K_IF LP . b_expr RP statement K_ELSE statement

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    TRUE        shift, and go to state 49
    FALSE       shift, and go to state 50
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LOP_NOT     shift, and go to state 51
    LP          shift, and go to state 47

    expr    go to state 52
    b_expr  go to state 54


State 29

   21 scanf: F_SCANF LP . expr RP

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 55


State 30

   20 printf: F_PRINTF LP . expr RP

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 56


State 31

    3 statements: statements . statement
   13 statement: LC statements . RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13
    RC          shift, and go to state 57

    statement    go to state 33
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 32

    0 $accept: program $end .

    $default  accept


State 33

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 34

    6 statement: declaration SEMI .

    $default  reduce using rule 6 (statement)


State 35

    7 statement: assignment SEMI .

    $default  reduce using rule 7 (statement)


State 36

    8 statement: printf SEMI .

    $default  reduce using rule 8 (statement)


State 37

    9 statement: scanf SEMI .

    $default  reduce using rule 9 (statement)


State 38

   17 idlist: IDENTIFIER .
   19 assignment: IDENTIFIER . LOP_ASSIGN expr
   25 function: T IDENTIFIER . LP RP statement

    LOP_ASSIGN  shift, and go to state 25
    LP          shift, and go to state 58

    $default  reduce using rule 17 (idlist)


State 39

   14 declaration: T idlist .
   15 idlist: idlist . COMMA IDENTIFIER
   16       | idlist . COMMA assignment

    COMMA  shift, and go to state 59

    $default  reduce using rule 14 (declaration)


State 40

   18 idlist: assignment .

    $default  reduce using rule 18 (idlist)


State 41

   26 expr: IDENTIFIER .

    $default  reduce using rule 26 (expr)


State 42

   27 expr: INTEGER .

    $default  reduce using rule 27 (expr)


State 43

   28 expr: CHARS .

    $default  reduce using rule 28 (expr)


State 44

   29 expr: STRINGS .

    $default  reduce using rule 29 (expr)


State 45

   36 expr: LOP_ADD . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 60


State 46

   37 expr: LOP_SUB . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 61


State 47

   35 expr: LP . expr RP

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 62


State 48

   19 assignment: IDENTIFIER LOP_ASSIGN expr .
   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 19 (assignment)


State 49

   47 b_expr: TRUE .

    $default  reduce using rule 47 (b_expr)


State 50

   48 b_expr: FALSE .

    $default  reduce using rule 48 (b_expr)


State 51

   46 b_expr: LOP_NOT . b_expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    TRUE        shift, and go to state 49
    FALSE       shift, and go to state 50
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LOP_NOT     shift, and go to state 51
    LP          shift, and go to state 47

    expr    go to state 52
    b_expr  go to state 68


State 52

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   38 b_expr: expr . LOP_EQ expr
   39       | expr . LOP_LT expr
   40       | expr . LOP_LE expr
   41       | expr . LOP_GT expr
   42       | expr . LOP_GE expr
   43       | expr . LOP_NE expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67
    LOP_EQ   shift, and go to state 69
    LOP_LT   shift, and go to state 70
    LOP_LE   shift, and go to state 71
    LOP_GT   shift, and go to state 72
    LOP_GE   shift, and go to state 73
    LOP_NE   shift, and go to state 74


State 53

   24 while: K_WHILE LP b_expr . RP statement
   44 b_expr: b_expr . LOP_AND b_expr
   45       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 75
    LOP_OR   shift, and go to state 76
    RP       shift, and go to state 77


State 54

   22 if_else: K_IF LP b_expr . RP statement
   23        | K_IF LP b_expr . RP statement K_ELSE statement
   44 b_expr: b_expr . LOP_AND b_expr
   45       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 75
    LOP_OR   shift, and go to state 76
    RP       shift, and go to state 78


State 55

   21 scanf: F_SCANF LP expr . RP
   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67
    RP       shift, and go to state 79


State 56

   20 printf: F_PRINTF LP expr . RP
   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67
    RP       shift, and go to state 80


State 57

   13 statement: LC statements RC .

    $default  reduce using rule 13 (statement)


State 58

   25 function: T IDENTIFIER LP . RP statement

    RP  shift, and go to state 81


State 59

   15 idlist: idlist COMMA . IDENTIFIER
   16       | idlist COMMA . assignment

    IDENTIFIER  shift, and go to state 82

    assignment  go to state 83


State 60

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   36     | LOP_ADD expr .

    $default  reduce using rule 36 (expr)


State 61

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   37     | LOP_SUB expr .

    $default  reduce using rule 37 (expr)


State 62

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   35     | LP expr . RP

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67
    RP       shift, and go to state 84


State 63

   30 expr: expr LOP_ADD . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 85


State 64

   31 expr: expr LOP_SUB . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 86


State 65

   32 expr: expr LOP_MUL . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 87


State 66

   33 expr: expr LOP_DIV . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 88


State 67

   34 expr: expr LOP_REM . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 89


State 68

   44 b_expr: b_expr . LOP_AND b_expr
   45       | b_expr . LOP_OR b_expr
   46       | LOP_NOT b_expr .

    LOP_AND  shift, and go to state 75
    LOP_OR   shift, and go to state 76

    $default  reduce using rule 46 (b_expr)


State 69

   38 b_expr: expr LOP_EQ . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 90


State 70

   39 b_expr: expr LOP_LT . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 91


State 71

   40 b_expr: expr LOP_LE . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 92


State 72

   41 b_expr: expr LOP_GT . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 93


State 73

   42 b_expr: expr LOP_GE . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 94


State 74

   43 b_expr: expr LOP_NE . expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LP          shift, and go to state 47

    expr  go to state 95


State 75

   44 b_expr: b_expr LOP_AND . b_expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    TRUE        shift, and go to state 49
    FALSE       shift, and go to state 50
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LOP_NOT     shift, and go to state 51
    LP          shift, and go to state 47

    expr    go to state 52
    b_expr  go to state 96


State 76

   45 b_expr: b_expr LOP_OR . b_expr

    IDENTIFIER  shift, and go to state 41
    INTEGER     shift, and go to state 42
    CHARS       shift, and go to state 43
    STRINGS     shift, and go to state 44
    TRUE        shift, and go to state 49
    FALSE       shift, and go to state 50
    LOP_ADD     shift, and go to state 45
    LOP_SUB     shift, and go to state 46
    LOP_NOT     shift, and go to state 51
    LP          shift, and go to state 47

    expr    go to state 52
    b_expr  go to state 97


State 77

   24 while: K_WHILE LP b_expr RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    statement    go to state 98
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 78

   22 if_else: K_IF LP b_expr RP . statement
   23        | K_IF LP b_expr RP . statement K_ELSE statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    statement    go to state 99
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 79

   21 scanf: F_SCANF LP expr RP .

    $default  reduce using rule 21 (scanf)


State 80

   20 printf: F_PRINTF LP expr RP .

    $default  reduce using rule 20 (printf)


State 81

   25 function: T IDENTIFIER LP RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    statement    go to state 100
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 82

   15 idlist: idlist COMMA IDENTIFIER .
   19 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 25

    $default  reduce using rule 15 (idlist)


State 83

   16 idlist: idlist COMMA assignment .

    $default  reduce using rule 16 (idlist)


State 84

   35 expr: LP expr RP .

    $default  reduce using rule 35 (expr)


State 85

   30 expr: expr . LOP_ADD expr
   30     | expr LOP_ADD expr .
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    $default  reduce using rule 30 (expr)


State 86

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   31     | expr LOP_SUB expr .
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    $default  reduce using rule 31 (expr)


State 87

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   32     | expr LOP_MUL expr .
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64

    $default  reduce using rule 32 (expr)


State 88

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   33     | expr LOP_DIV expr .
   34     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64

    $default  reduce using rule 33 (expr)


State 89

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   34     | expr LOP_REM expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64

    $default  reduce using rule 34 (expr)


State 90

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   38 b_expr: expr LOP_EQ expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 38 (b_expr)


State 91

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   39 b_expr: expr LOP_LT expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 39 (b_expr)


State 92

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   40 b_expr: expr LOP_LE expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 40 (b_expr)


State 93

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   41 b_expr: expr LOP_GT expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 41 (b_expr)


State 94

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   42 b_expr: expr LOP_GE expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 42 (b_expr)


State 95

   30 expr: expr . LOP_ADD expr
   31     | expr . LOP_SUB expr
   32     | expr . LOP_MUL expr
   33     | expr . LOP_DIV expr
   34     | expr . LOP_REM expr
   43 b_expr: expr LOP_NE expr .

    LOP_ADD  shift, and go to state 63
    LOP_SUB  shift, and go to state 64
    LOP_MUL  shift, and go to state 65
    LOP_DIV  shift, and go to state 66
    LOP_REM  shift, and go to state 67

    $default  reduce using rule 43 (b_expr)


State 96

   44 b_expr: b_expr . LOP_AND b_expr
   44       | b_expr LOP_AND b_expr .
   45       | b_expr . LOP_OR b_expr

    $default  reduce using rule 44 (b_expr)


State 97

   44 b_expr: b_expr . LOP_AND b_expr
   45       | b_expr . LOP_OR b_expr
   45       | b_expr LOP_OR b_expr .

    $default  reduce using rule 45 (b_expr)


State 98

   24 while: K_WHILE LP b_expr RP statement .

    $default  reduce using rule 24 (while)


State 99

   22 if_else: K_IF LP b_expr RP statement .
   23        | K_IF LP b_expr RP statement . K_ELSE statement

    K_ELSE  shift, and go to state 101

    $default  reduce using rule 22 (if_else)


State 100

   25 function: T IDENTIFIER LP RP statement .

    $default  reduce using rule 25 (function)


State 101

   23 if_else: K_IF LP b_expr RP statement K_ELSE . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_IF        shift, and go to state 4
    F_SCANF     shift, and go to state 5
    F_PRINTF    shift, and go to state 6
    T_CHAR      shift, and go to state 7
    T_INT       shift, and go to state 8
    T_STRING    shift, and go to state 9
    T_BOOL      shift, and go to state 10
    T_VOID      shift, and go to state 11
    SEMI        shift, and go to state 12
    LC          shift, and go to state 13

    statement    go to state 102
    declaration  go to state 17
    assignment   go to state 18
    printf       go to state 19
    scanf        go to state 20
    if_else      go to state 21
    while        go to state 22
    function     go to state 23
    T            go to state 24


State 102

   23 if_else: K_IF LP b_expr RP statement K_ELSE statement .

    $default  reduce using rule 23 (if_else)
