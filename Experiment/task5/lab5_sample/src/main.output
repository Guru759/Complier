Terminals unused in grammar

    BOOL
    K_DO
    LB
    RB
    LOWER_THEN_ELSE


State 123 conflicts: 19 reduce/reduce
State 124 conflicts: 16 shift/reduce
State 125 conflicts: 1 shift/reduce
State 131 conflicts: 19 reduce/reduce
State 132 conflicts: 19 reduce/reduce
State 133 conflicts: 19 reduce/reduce
State 134 conflicts: 19 reduce/reduce
State 138 conflicts: 19 reduce/reduce
State 140 conflicts: 19 reduce/reduce
State 141 conflicts: 19 reduce/reduce
State 142 conflicts: 19 reduce/reduce
State 143 conflicts: 19 reduce/reduce
State 144 conflicts: 19 reduce/reduce
State 145 conflicts: 19 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 comstatement: statements
    5             | SEMI
    6             | K_SKIP SEMI
    7             | declaration SEMI
    8             | assignment SEMI
    9             | op_assignment SEMI
   10             | printf SEMI
   11             | scanf SEMI
   12             | if_else
   13             | while
   14             | for
   15             | function
   16             | return SEMI

   17 statement: SEMI
   18          | K_SKIP SEMI
   19          | declaration SEMI
   20          | assignment SEMI
   21          | op_assignment SEMI
   22          | printf SEMI
   23          | scanf SEMI
   24          | if_else
   25          | while
   26          | for
   27          | function
   28          | return SEMI
   29          | LC statements RC

   30 declaration: T IDENTIFIER LOP_ASSIGN expr
   31            | T IDENTIFIER
   32            | K_CONST T IDENTIFIER
   33            | declaration COMMA IDENTIFIER
   34            | declaration COMMA assignment

   35 assignment: IDENTIFIER LOP_ASSIGN expr

   36 op_assignment: IDENTIFIER LOP_ADDA expr
   37              | IDENTIFIER LOP_SUBA expr
   38              | IDENTIFIER LOP_ADAD
   39              | IDENTIFIER LOP_SBSB

   40 printf: F_PRINTF LP expr RP

   41 scanf: F_SCANF LP expr RP

   42 if_else: K_IF LP b_expr RP comstatement K_ELSE comstatement
   43        | K_IF LP b_expr RP comstatement

   44 while: K_WHILE LP b_expr RP statement

   45 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP statement

   46 function: T IDENTIFIER LP RP statement

   47 return: K_RETURN expr

   48 expr: IDENTIFIER
   49     | INTEGER
   50     | CHARS
   51     | STRINGS
   52     | expr LOP_ADD expr
   53     | expr LOP_SUB expr
   54     | expr LOP_MUL expr
   55     | expr LOP_DIV expr
   56     | expr LOP_REM expr
   57     | LP expr RP
   58     | LOP_ADD expr
   59     | LOP_SUB expr

   60 b_expr: expr LOP_EQ expr
   61       | expr LOP_LT expr
   62       | expr LOP_LE expr
   63       | expr LOP_GT expr
   64       | expr LOP_GE expr
   65       | expr LOP_NE expr
   66       | LOP_NOT b_expr
   67       | b_expr LOP_AND b_expr
   68       | b_expr LOP_OR b_expr
   69       | TRUE
   70       | FALSE

   71 T: T_INT
   72  | T_CHAR
   73  | T_BOOL
   74  | T_STRING
   75  | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 30 31 32 33 35 36 37 38 39 46 48
    INTEGER (259) 49
    CHARS (260) 50
    BOOL (261)
    STRINGS (262) 51
    TRUE (263) 69
    FALSE (264) 70
    K_SKIP (265) 6 18
    K_WHILE (266) 44
    K_FOR (267) 45
    K_IF (268) 42 43
    K_ELSE (269) 42
    K_RETURN (270) 47
    F_SCANF (271) 41
    F_PRINTF (272) 40
    K_CONST (273) 32
    K_DO (274)
    T_CHAR (275) 72
    T_INT (276) 71
    T_STRING (277) 74
    T_BOOL (278) 73
    T_VOID (279) 75
    LOP_ADD (280) 52 58
    LOP_SUB (281) 53 59
    LOP_MUL (282) 54
    LOP_DIV (283) 55
    LOP_REM (284) 56
    LOP_AND (285) 67
    LOP_OR (286) 68
    LOP_NOT (287) 66
    LOP_EQ (288) 60
    LOP_LT (289) 61
    LOP_LE (290) 62
    LOP_GT (291) 63
    LOP_GE (292) 64
    LOP_NE (293) 65
    LOP_ASSIGN (294) 30 35
    LOP_ADDA (295) 36
    LOP_SUBA (296) 37
    LOP_ADAD (297) 38
    LOP_SBSB (298) 39
    SEMI (299) 5 6 7 8 9 10 11 16 17 18 19 20 21 22 23 28 45
    LP (300) 40 41 42 43 44 45 46 57
    RP (301) 40 41 42 43 44 45 46 57
    LB (302)
    RB (303)
    LC (304) 29
    RC (305) 29
    COMMA (306) 33 34
    MINUS (307)
    PLUS (308)
    LOWER_THEN_ELSE (309)


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    program (56)
        on left: 1
        on right: 0
    statements (57)
        on left: 2 3
        on right: 1 3 4 29
    comstatement (58)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16
        on right: 42 43
    statement (59)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28 29
        on right: 2 3 44 45 46
    declaration (60)
        on left: 30 31 32 33 34
        on right: 7 19 33 34 45
    assignment (61)
        on left: 35
        on right: 8 20 34 45
    op_assignment (62)
        on left: 36 37 38 39
        on right: 9 21
    printf (63)
        on left: 40
        on right: 10 22
    scanf (64)
        on left: 41
        on right: 11 23
    if_else (65)
        on left: 42 43
        on right: 12 24
    while (66)
        on left: 44
        on right: 13 25
    for (67)
        on left: 45
        on right: 14 26
    function (68)
        on left: 46
        on right: 15 27
    return (69)
        on left: 47
        on right: 16 28
    expr (70)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 30 35 36 37 40 41 47 52 53 54 55 56 57 58 59 60 61 62 63 64 65
    b_expr (71)
        on left: 60 61 62 63 64 65 66 67 68 69 70
        on right: 42 43 44 45 66 67 68
    T (72)
        on left: 71 72 73 74 75
        on right: 30 31 32 46


State 0

    0 $accept: . program $end

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    program        go to state 17
    statements     go to state 18
    statement      go to state 19
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 1

   35 assignment: IDENTIFIER . LOP_ASSIGN expr
   36 op_assignment: IDENTIFIER . LOP_ADDA expr
   37              | IDENTIFIER . LOP_SUBA expr
   38              | IDENTIFIER . LOP_ADAD
   39              | IDENTIFIER . LOP_SBSB

    LOP_ASSIGN  shift, and go to state 31
    LOP_ADDA    shift, and go to state 32
    LOP_SUBA    shift, and go to state 33
    LOP_ADAD    shift, and go to state 34
    LOP_SBSB    shift, and go to state 35


State 2

   18 statement: K_SKIP . SEMI

    SEMI  shift, and go to state 36


State 3

   44 while: K_WHILE . LP b_expr RP statement

    LP  shift, and go to state 37


State 4

   45 for: K_FOR . LP declaration SEMI b_expr SEMI assignment RP statement

    LP  shift, and go to state 38


State 5

   42 if_else: K_IF . LP b_expr RP comstatement K_ELSE comstatement
   43        | K_IF . LP b_expr RP comstatement

    LP  shift, and go to state 39


State 6

   47 return: K_RETURN . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 47


State 7

   41 scanf: F_SCANF . LP expr RP

    LP  shift, and go to state 48


State 8

   40 printf: F_PRINTF . LP expr RP

    LP  shift, and go to state 49


State 9

   32 declaration: K_CONST . T IDENTIFIER

    T_CHAR    shift, and go to state 10
    T_INT     shift, and go to state 11
    T_STRING  shift, and go to state 12
    T_BOOL    shift, and go to state 13
    T_VOID    shift, and go to state 14

    T  go to state 50


State 10

   72 T: T_CHAR .

    $default  reduce using rule 72 (T)


State 11

   71 T: T_INT .

    $default  reduce using rule 71 (T)


State 12

   74 T: T_STRING .

    $default  reduce using rule 74 (T)


State 13

   73 T: T_BOOL .

    $default  reduce using rule 73 (T)


State 14

   75 T: T_VOID .

    $default  reduce using rule 75 (T)


State 15

   17 statement: SEMI .

    $default  reduce using rule 17 (statement)


State 16

   29 statement: LC . statements RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    statements     go to state 51
    statement      go to state 19
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 17

    0 $accept: program . $end

    $end  shift, and go to state 52


State 18

    1 program: statements .
    3 statements: statements . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    $default  reduce using rule 1 (program)

    statement      go to state 53
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 19

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 20

   19 statement: declaration . SEMI
   33 declaration: declaration . COMMA IDENTIFIER
   34            | declaration . COMMA assignment

    SEMI   shift, and go to state 54
    COMMA  shift, and go to state 55


State 21

   20 statement: assignment . SEMI

    SEMI  shift, and go to state 56


State 22

   21 statement: op_assignment . SEMI

    SEMI  shift, and go to state 57


State 23

   22 statement: printf . SEMI

    SEMI  shift, and go to state 58


State 24

   23 statement: scanf . SEMI

    SEMI  shift, and go to state 59


State 25

   24 statement: if_else .

    $default  reduce using rule 24 (statement)


State 26

   25 statement: while .

    $default  reduce using rule 25 (statement)


State 27

   26 statement: for .

    $default  reduce using rule 26 (statement)


State 28

   27 statement: function .

    $default  reduce using rule 27 (statement)


State 29

   28 statement: return . SEMI

    SEMI  shift, and go to state 60


State 30

   30 declaration: T . IDENTIFIER LOP_ASSIGN expr
   31            | T . IDENTIFIER
   46 function: T . IDENTIFIER LP RP statement

    IDENTIFIER  shift, and go to state 61


State 31

   35 assignment: IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 62


State 32

   36 op_assignment: IDENTIFIER LOP_ADDA . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 63


State 33

   37 op_assignment: IDENTIFIER LOP_SUBA . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 64


State 34

   38 op_assignment: IDENTIFIER LOP_ADAD .

    $default  reduce using rule 38 (op_assignment)


State 35

   39 op_assignment: IDENTIFIER LOP_SBSB .

    $default  reduce using rule 39 (op_assignment)


State 36

   18 statement: K_SKIP SEMI .

    $default  reduce using rule 18 (statement)


State 37

   44 while: K_WHILE LP . b_expr RP statement

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 69


State 38

   45 for: K_FOR LP . declaration SEMI b_expr SEMI assignment RP statement

    K_CONST   shift, and go to state 9
    T_CHAR    shift, and go to state 10
    T_INT     shift, and go to state 11
    T_STRING  shift, and go to state 12
    T_BOOL    shift, and go to state 13
    T_VOID    shift, and go to state 14

    declaration  go to state 70
    T            go to state 71


State 39

   42 if_else: K_IF LP . b_expr RP comstatement K_ELSE comstatement
   43        | K_IF LP . b_expr RP comstatement

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 72


State 40

   48 expr: IDENTIFIER .

    $default  reduce using rule 48 (expr)


State 41

   49 expr: INTEGER .

    $default  reduce using rule 49 (expr)


State 42

   50 expr: CHARS .

    $default  reduce using rule 50 (expr)


State 43

   51 expr: STRINGS .

    $default  reduce using rule 51 (expr)


State 44

   58 expr: LOP_ADD . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 73


State 45

   59 expr: LOP_SUB . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 74


State 46

   57 expr: LP . expr RP

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 75


State 47

   47 return: K_RETURN expr .
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 47 (return)


State 48

   41 scanf: F_SCANF LP . expr RP

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 81


State 49

   40 printf: F_PRINTF LP . expr RP

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 82


State 50

   32 declaration: K_CONST T . IDENTIFIER

    IDENTIFIER  shift, and go to state 83


State 51

    3 statements: statements . statement
   29 statement: LC statements . RC

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16
    RC          shift, and go to state 84

    statement      go to state 53
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 52

    0 $accept: program $end .

    $default  accept


State 53

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 54

   19 statement: declaration SEMI .

    $default  reduce using rule 19 (statement)


State 55

   33 declaration: declaration COMMA . IDENTIFIER
   34            | declaration COMMA . assignment

    IDENTIFIER  shift, and go to state 85

    assignment  go to state 86


State 56

   20 statement: assignment SEMI .

    $default  reduce using rule 20 (statement)


State 57

   21 statement: op_assignment SEMI .

    $default  reduce using rule 21 (statement)


State 58

   22 statement: printf SEMI .

    $default  reduce using rule 22 (statement)


State 59

   23 statement: scanf SEMI .

    $default  reduce using rule 23 (statement)


State 60

   28 statement: return SEMI .

    $default  reduce using rule 28 (statement)


State 61

   30 declaration: T IDENTIFIER . LOP_ASSIGN expr
   31            | T IDENTIFIER .
   46 function: T IDENTIFIER . LP RP statement

    LOP_ASSIGN  shift, and go to state 87
    LP          shift, and go to state 88

    $default  reduce using rule 31 (declaration)


State 62

   35 assignment: IDENTIFIER LOP_ASSIGN expr .
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 35 (assignment)


State 63

   36 op_assignment: IDENTIFIER LOP_ADDA expr .
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 36 (op_assignment)


State 64

   37 op_assignment: IDENTIFIER LOP_SUBA expr .
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 37 (op_assignment)


State 65

   69 b_expr: TRUE .

    $default  reduce using rule 69 (b_expr)


State 66

   70 b_expr: FALSE .

    $default  reduce using rule 70 (b_expr)


State 67

   66 b_expr: LOP_NOT . b_expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 89


State 68

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   60 b_expr: expr . LOP_EQ expr
   61       | expr . LOP_LT expr
   62       | expr . LOP_LE expr
   63       | expr . LOP_GT expr
   64       | expr . LOP_GE expr
   65       | expr . LOP_NE expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80
    LOP_EQ   shift, and go to state 90
    LOP_LT   shift, and go to state 91
    LOP_LE   shift, and go to state 92
    LOP_GT   shift, and go to state 93
    LOP_GE   shift, and go to state 94
    LOP_NE   shift, and go to state 95


State 69

   44 while: K_WHILE LP b_expr . RP statement
   67 b_expr: b_expr . LOP_AND b_expr
   68       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 96
    LOP_OR   shift, and go to state 97
    RP       shift, and go to state 98


State 70

   33 declaration: declaration . COMMA IDENTIFIER
   34            | declaration . COMMA assignment
   45 for: K_FOR LP declaration . SEMI b_expr SEMI assignment RP statement

    SEMI   shift, and go to state 99
    COMMA  shift, and go to state 55


State 71

   30 declaration: T . IDENTIFIER LOP_ASSIGN expr
   31            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 100


State 72

   42 if_else: K_IF LP b_expr . RP comstatement K_ELSE comstatement
   43        | K_IF LP b_expr . RP comstatement
   67 b_expr: b_expr . LOP_AND b_expr
   68       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 96
    LOP_OR   shift, and go to state 97
    RP       shift, and go to state 101


State 73

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   58     | LOP_ADD expr .

    $default  reduce using rule 58 (expr)


State 74

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   59     | LOP_SUB expr .

    $default  reduce using rule 59 (expr)


State 75

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   57     | LP expr . RP

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80
    RP       shift, and go to state 102


State 76

   52 expr: expr LOP_ADD . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 103


State 77

   53 expr: expr LOP_SUB . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 104


State 78

   54 expr: expr LOP_MUL . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 105


State 79

   55 expr: expr LOP_DIV . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 106


State 80

   56 expr: expr LOP_REM . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 107


State 81

   41 scanf: F_SCANF LP expr . RP
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80
    RP       shift, and go to state 108


State 82

   40 printf: F_PRINTF LP expr . RP
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80
    RP       shift, and go to state 109


State 83

   32 declaration: K_CONST T IDENTIFIER .

    $default  reduce using rule 32 (declaration)


State 84

   29 statement: LC statements RC .

    $default  reduce using rule 29 (statement)


State 85

   33 declaration: declaration COMMA IDENTIFIER .
   35 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 31

    $default  reduce using rule 33 (declaration)


State 86

   34 declaration: declaration COMMA assignment .

    $default  reduce using rule 34 (declaration)


State 87

   30 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 110


State 88

   46 function: T IDENTIFIER LP . RP statement

    RP  shift, and go to state 111


State 89

   66 b_expr: LOP_NOT b_expr .
   67       | b_expr . LOP_AND b_expr
   68       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 96
    LOP_OR   shift, and go to state 97

    $default  reduce using rule 66 (b_expr)


State 90

   60 b_expr: expr LOP_EQ . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 112


State 91

   61 b_expr: expr LOP_LT . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 113


State 92

   62 b_expr: expr LOP_LE . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 114


State 93

   63 b_expr: expr LOP_GT . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 115


State 94

   64 b_expr: expr LOP_GE . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 116


State 95

   65 b_expr: expr LOP_NE . expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LP          shift, and go to state 46

    expr  go to state 117


State 96

   67 b_expr: b_expr LOP_AND . b_expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 118


State 97

   68 b_expr: b_expr LOP_OR . b_expr

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 119


State 98

   44 while: K_WHILE LP b_expr RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    statement      go to state 120
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 99

   45 for: K_FOR LP declaration SEMI . b_expr SEMI assignment RP statement

    IDENTIFIER  shift, and go to state 40
    INTEGER     shift, and go to state 41
    CHARS       shift, and go to state 42
    STRINGS     shift, and go to state 43
    TRUE        shift, and go to state 65
    FALSE       shift, and go to state 66
    LOP_ADD     shift, and go to state 44
    LOP_SUB     shift, and go to state 45
    LOP_NOT     shift, and go to state 67
    LP          shift, and go to state 46

    expr    go to state 68
    b_expr  go to state 121


State 100

   30 declaration: T IDENTIFIER . LOP_ASSIGN expr
   31            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 87

    $default  reduce using rule 31 (declaration)


State 101

   42 if_else: K_IF LP b_expr RP . comstatement K_ELSE comstatement
   43        | K_IF LP b_expr RP . comstatement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 122
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 123
    LC          shift, and go to state 16

    statements     go to state 124
    comstatement   go to state 125
    statement      go to state 19
    declaration    go to state 126
    assignment     go to state 127
    op_assignment  go to state 128
    printf         go to state 129
    scanf          go to state 130
    if_else        go to state 131
    while          go to state 132
    for            go to state 133
    function       go to state 134
    return         go to state 135
    T              go to state 30


State 102

   57 expr: LP expr RP .

    $default  reduce using rule 57 (expr)


State 103

   52 expr: expr . LOP_ADD expr
   52     | expr LOP_ADD expr .
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    $default  reduce using rule 52 (expr)


State 104

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   53     | expr LOP_SUB expr .
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    $default  reduce using rule 53 (expr)


State 105

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   54     | expr LOP_MUL expr .
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77

    $default  reduce using rule 54 (expr)


State 106

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   55     | expr LOP_DIV expr .
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77

    $default  reduce using rule 55 (expr)


State 107

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   56     | expr LOP_REM expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77

    $default  reduce using rule 56 (expr)


State 108

   41 scanf: F_SCANF LP expr RP .

    $default  reduce using rule 41 (scanf)


State 109

   40 printf: F_PRINTF LP expr RP .

    $default  reduce using rule 40 (printf)


State 110

   30 declaration: T IDENTIFIER LOP_ASSIGN expr .
   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 30 (declaration)


State 111

   46 function: T IDENTIFIER LP RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    statement      go to state 136
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 112

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   60 b_expr: expr LOP_EQ expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 60 (b_expr)


State 113

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   61 b_expr: expr LOP_LT expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 61 (b_expr)


State 114

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   62 b_expr: expr LOP_LE expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 62 (b_expr)


State 115

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   63 b_expr: expr LOP_GT expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 63 (b_expr)


State 116

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   64 b_expr: expr LOP_GE expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 64 (b_expr)


State 117

   52 expr: expr . LOP_ADD expr
   53     | expr . LOP_SUB expr
   54     | expr . LOP_MUL expr
   55     | expr . LOP_DIV expr
   56     | expr . LOP_REM expr
   65 b_expr: expr LOP_NE expr .

    LOP_ADD  shift, and go to state 76
    LOP_SUB  shift, and go to state 77
    LOP_MUL  shift, and go to state 78
    LOP_DIV  shift, and go to state 79
    LOP_REM  shift, and go to state 80

    $default  reduce using rule 65 (b_expr)


State 118

   67 b_expr: b_expr . LOP_AND b_expr
   67       | b_expr LOP_AND b_expr .
   68       | b_expr . LOP_OR b_expr

    LOP_OR  shift, and go to state 97

    $default  reduce using rule 67 (b_expr)


State 119

   67 b_expr: b_expr . LOP_AND b_expr
   68       | b_expr . LOP_OR b_expr
   68       | b_expr LOP_OR b_expr .

    $default  reduce using rule 68 (b_expr)


State 120

   44 while: K_WHILE LP b_expr RP statement .

    $default  reduce using rule 44 (while)


State 121

   45 for: K_FOR LP declaration SEMI b_expr . SEMI assignment RP statement
   67 b_expr: b_expr . LOP_AND b_expr
   68       | b_expr . LOP_OR b_expr

    LOP_AND  shift, and go to state 96
    LOP_OR   shift, and go to state 97
    SEMI     shift, and go to state 137


State 122

    6 comstatement: K_SKIP . SEMI
   18 statement: K_SKIP . SEMI

    SEMI  shift, and go to state 138


State 123

    5 comstatement: SEMI .
   17 statement: SEMI .

    $end        reduce using rule 5 (comstatement)
    $end        [reduce using rule 17 (statement)]
    IDENTIFIER  reduce using rule 5 (comstatement)
    IDENTIFIER  [reduce using rule 17 (statement)]
    K_SKIP      reduce using rule 5 (comstatement)
    K_SKIP      [reduce using rule 17 (statement)]
    K_WHILE     reduce using rule 5 (comstatement)
    K_WHILE     [reduce using rule 17 (statement)]
    K_FOR       reduce using rule 5 (comstatement)
    K_FOR       [reduce using rule 17 (statement)]
    K_IF        reduce using rule 5 (comstatement)
    K_IF        [reduce using rule 17 (statement)]
    K_ELSE      reduce using rule 5 (comstatement)
    K_ELSE      [reduce using rule 17 (statement)]
    K_RETURN    reduce using rule 5 (comstatement)
    K_RETURN    [reduce using rule 17 (statement)]
    F_SCANF     reduce using rule 5 (comstatement)
    F_SCANF     [reduce using rule 17 (statement)]
    F_PRINTF    reduce using rule 5 (comstatement)
    F_PRINTF    [reduce using rule 17 (statement)]
    K_CONST     reduce using rule 5 (comstatement)
    K_CONST     [reduce using rule 17 (statement)]
    T_CHAR      reduce using rule 5 (comstatement)
    T_CHAR      [reduce using rule 17 (statement)]
    T_INT       reduce using rule 5 (comstatement)
    T_INT       [reduce using rule 17 (statement)]
    T_STRING    reduce using rule 5 (comstatement)
    T_STRING    [reduce using rule 17 (statement)]
    T_BOOL      reduce using rule 5 (comstatement)
    T_BOOL      [reduce using rule 17 (statement)]
    T_VOID      reduce using rule 5 (comstatement)
    T_VOID      [reduce using rule 17 (statement)]
    SEMI        reduce using rule 5 (comstatement)
    SEMI        [reduce using rule 17 (statement)]
    LC          reduce using rule 5 (comstatement)
    LC          [reduce using rule 17 (statement)]
    RC          reduce using rule 5 (comstatement)
    RC          [reduce using rule 17 (statement)]
    $default    reduce using rule 5 (comstatement)


State 124

    3 statements: statements . statement
    4 comstatement: statements .

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    IDENTIFIER  [reduce using rule 4 (comstatement)]
    K_SKIP      [reduce using rule 4 (comstatement)]
    K_WHILE     [reduce using rule 4 (comstatement)]
    K_FOR       [reduce using rule 4 (comstatement)]
    K_IF        [reduce using rule 4 (comstatement)]
    K_RETURN    [reduce using rule 4 (comstatement)]
    F_SCANF     [reduce using rule 4 (comstatement)]
    F_PRINTF    [reduce using rule 4 (comstatement)]
    K_CONST     [reduce using rule 4 (comstatement)]
    T_CHAR      [reduce using rule 4 (comstatement)]
    T_INT       [reduce using rule 4 (comstatement)]
    T_STRING    [reduce using rule 4 (comstatement)]
    T_BOOL      [reduce using rule 4 (comstatement)]
    T_VOID      [reduce using rule 4 (comstatement)]
    SEMI        [reduce using rule 4 (comstatement)]
    LC          [reduce using rule 4 (comstatement)]
    $default    reduce using rule 4 (comstatement)

    statement      go to state 53
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 125

   42 if_else: K_IF LP b_expr RP comstatement . K_ELSE comstatement
   43        | K_IF LP b_expr RP comstatement .

    K_ELSE  shift, and go to state 139

    K_ELSE    [reduce using rule 43 (if_else)]
    $default  reduce using rule 43 (if_else)


State 126

    7 comstatement: declaration . SEMI
   19 statement: declaration . SEMI
   33 declaration: declaration . COMMA IDENTIFIER
   34            | declaration . COMMA assignment

    SEMI   shift, and go to state 140
    COMMA  shift, and go to state 55


State 127

    8 comstatement: assignment . SEMI
   20 statement: assignment . SEMI

    SEMI  shift, and go to state 141


State 128

    9 comstatement: op_assignment . SEMI
   21 statement: op_assignment . SEMI

    SEMI  shift, and go to state 142


State 129

   10 comstatement: printf . SEMI
   22 statement: printf . SEMI

    SEMI  shift, and go to state 143


State 130

   11 comstatement: scanf . SEMI
   23 statement: scanf . SEMI

    SEMI  shift, and go to state 144


State 131

   12 comstatement: if_else .
   24 statement: if_else .

    $end        reduce using rule 12 (comstatement)
    $end        [reduce using rule 24 (statement)]
    IDENTIFIER  reduce using rule 12 (comstatement)
    IDENTIFIER  [reduce using rule 24 (statement)]
    K_SKIP      reduce using rule 12 (comstatement)
    K_SKIP      [reduce using rule 24 (statement)]
    K_WHILE     reduce using rule 12 (comstatement)
    K_WHILE     [reduce using rule 24 (statement)]
    K_FOR       reduce using rule 12 (comstatement)
    K_FOR       [reduce using rule 24 (statement)]
    K_IF        reduce using rule 12 (comstatement)
    K_IF        [reduce using rule 24 (statement)]
    K_ELSE      reduce using rule 12 (comstatement)
    K_ELSE      [reduce using rule 24 (statement)]
    K_RETURN    reduce using rule 12 (comstatement)
    K_RETURN    [reduce using rule 24 (statement)]
    F_SCANF     reduce using rule 12 (comstatement)
    F_SCANF     [reduce using rule 24 (statement)]
    F_PRINTF    reduce using rule 12 (comstatement)
    F_PRINTF    [reduce using rule 24 (statement)]
    K_CONST     reduce using rule 12 (comstatement)
    K_CONST     [reduce using rule 24 (statement)]
    T_CHAR      reduce using rule 12 (comstatement)
    T_CHAR      [reduce using rule 24 (statement)]
    T_INT       reduce using rule 12 (comstatement)
    T_INT       [reduce using rule 24 (statement)]
    T_STRING    reduce using rule 12 (comstatement)
    T_STRING    [reduce using rule 24 (statement)]
    T_BOOL      reduce using rule 12 (comstatement)
    T_BOOL      [reduce using rule 24 (statement)]
    T_VOID      reduce using rule 12 (comstatement)
    T_VOID      [reduce using rule 24 (statement)]
    SEMI        reduce using rule 12 (comstatement)
    SEMI        [reduce using rule 24 (statement)]
    LC          reduce using rule 12 (comstatement)
    LC          [reduce using rule 24 (statement)]
    RC          reduce using rule 12 (comstatement)
    RC          [reduce using rule 24 (statement)]
    $default    reduce using rule 12 (comstatement)


State 132

   13 comstatement: while .
   25 statement: while .

    $end        reduce using rule 13 (comstatement)
    $end        [reduce using rule 25 (statement)]
    IDENTIFIER  reduce using rule 13 (comstatement)
    IDENTIFIER  [reduce using rule 25 (statement)]
    K_SKIP      reduce using rule 13 (comstatement)
    K_SKIP      [reduce using rule 25 (statement)]
    K_WHILE     reduce using rule 13 (comstatement)
    K_WHILE     [reduce using rule 25 (statement)]
    K_FOR       reduce using rule 13 (comstatement)
    K_FOR       [reduce using rule 25 (statement)]
    K_IF        reduce using rule 13 (comstatement)
    K_IF        [reduce using rule 25 (statement)]
    K_ELSE      reduce using rule 13 (comstatement)
    K_ELSE      [reduce using rule 25 (statement)]
    K_RETURN    reduce using rule 13 (comstatement)
    K_RETURN    [reduce using rule 25 (statement)]
    F_SCANF     reduce using rule 13 (comstatement)
    F_SCANF     [reduce using rule 25 (statement)]
    F_PRINTF    reduce using rule 13 (comstatement)
    F_PRINTF    [reduce using rule 25 (statement)]
    K_CONST     reduce using rule 13 (comstatement)
    K_CONST     [reduce using rule 25 (statement)]
    T_CHAR      reduce using rule 13 (comstatement)
    T_CHAR      [reduce using rule 25 (statement)]
    T_INT       reduce using rule 13 (comstatement)
    T_INT       [reduce using rule 25 (statement)]
    T_STRING    reduce using rule 13 (comstatement)
    T_STRING    [reduce using rule 25 (statement)]
    T_BOOL      reduce using rule 13 (comstatement)
    T_BOOL      [reduce using rule 25 (statement)]
    T_VOID      reduce using rule 13 (comstatement)
    T_VOID      [reduce using rule 25 (statement)]
    SEMI        reduce using rule 13 (comstatement)
    SEMI        [reduce using rule 25 (statement)]
    LC          reduce using rule 13 (comstatement)
    LC          [reduce using rule 25 (statement)]
    RC          reduce using rule 13 (comstatement)
    RC          [reduce using rule 25 (statement)]
    $default    reduce using rule 13 (comstatement)


State 133

   14 comstatement: for .
   26 statement: for .

    $end        reduce using rule 14 (comstatement)
    $end        [reduce using rule 26 (statement)]
    IDENTIFIER  reduce using rule 14 (comstatement)
    IDENTIFIER  [reduce using rule 26 (statement)]
    K_SKIP      reduce using rule 14 (comstatement)
    K_SKIP      [reduce using rule 26 (statement)]
    K_WHILE     reduce using rule 14 (comstatement)
    K_WHILE     [reduce using rule 26 (statement)]
    K_FOR       reduce using rule 14 (comstatement)
    K_FOR       [reduce using rule 26 (statement)]
    K_IF        reduce using rule 14 (comstatement)
    K_IF        [reduce using rule 26 (statement)]
    K_ELSE      reduce using rule 14 (comstatement)
    K_ELSE      [reduce using rule 26 (statement)]
    K_RETURN    reduce using rule 14 (comstatement)
    K_RETURN    [reduce using rule 26 (statement)]
    F_SCANF     reduce using rule 14 (comstatement)
    F_SCANF     [reduce using rule 26 (statement)]
    F_PRINTF    reduce using rule 14 (comstatement)
    F_PRINTF    [reduce using rule 26 (statement)]
    K_CONST     reduce using rule 14 (comstatement)
    K_CONST     [reduce using rule 26 (statement)]
    T_CHAR      reduce using rule 14 (comstatement)
    T_CHAR      [reduce using rule 26 (statement)]
    T_INT       reduce using rule 14 (comstatement)
    T_INT       [reduce using rule 26 (statement)]
    T_STRING    reduce using rule 14 (comstatement)
    T_STRING    [reduce using rule 26 (statement)]
    T_BOOL      reduce using rule 14 (comstatement)
    T_BOOL      [reduce using rule 26 (statement)]
    T_VOID      reduce using rule 14 (comstatement)
    T_VOID      [reduce using rule 26 (statement)]
    SEMI        reduce using rule 14 (comstatement)
    SEMI        [reduce using rule 26 (statement)]
    LC          reduce using rule 14 (comstatement)
    LC          [reduce using rule 26 (statement)]
    RC          reduce using rule 14 (comstatement)
    RC          [reduce using rule 26 (statement)]
    $default    reduce using rule 14 (comstatement)


State 134

   15 comstatement: function .
   27 statement: function .

    $end        reduce using rule 15 (comstatement)
    $end        [reduce using rule 27 (statement)]
    IDENTIFIER  reduce using rule 15 (comstatement)
    IDENTIFIER  [reduce using rule 27 (statement)]
    K_SKIP      reduce using rule 15 (comstatement)
    K_SKIP      [reduce using rule 27 (statement)]
    K_WHILE     reduce using rule 15 (comstatement)
    K_WHILE     [reduce using rule 27 (statement)]
    K_FOR       reduce using rule 15 (comstatement)
    K_FOR       [reduce using rule 27 (statement)]
    K_IF        reduce using rule 15 (comstatement)
    K_IF        [reduce using rule 27 (statement)]
    K_ELSE      reduce using rule 15 (comstatement)
    K_ELSE      [reduce using rule 27 (statement)]
    K_RETURN    reduce using rule 15 (comstatement)
    K_RETURN    [reduce using rule 27 (statement)]
    F_SCANF     reduce using rule 15 (comstatement)
    F_SCANF     [reduce using rule 27 (statement)]
    F_PRINTF    reduce using rule 15 (comstatement)
    F_PRINTF    [reduce using rule 27 (statement)]
    K_CONST     reduce using rule 15 (comstatement)
    K_CONST     [reduce using rule 27 (statement)]
    T_CHAR      reduce using rule 15 (comstatement)
    T_CHAR      [reduce using rule 27 (statement)]
    T_INT       reduce using rule 15 (comstatement)
    T_INT       [reduce using rule 27 (statement)]
    T_STRING    reduce using rule 15 (comstatement)
    T_STRING    [reduce using rule 27 (statement)]
    T_BOOL      reduce using rule 15 (comstatement)
    T_BOOL      [reduce using rule 27 (statement)]
    T_VOID      reduce using rule 15 (comstatement)
    T_VOID      [reduce using rule 27 (statement)]
    SEMI        reduce using rule 15 (comstatement)
    SEMI        [reduce using rule 27 (statement)]
    LC          reduce using rule 15 (comstatement)
    LC          [reduce using rule 27 (statement)]
    RC          reduce using rule 15 (comstatement)
    RC          [reduce using rule 27 (statement)]
    $default    reduce using rule 15 (comstatement)


State 135

   16 comstatement: return . SEMI
   28 statement: return . SEMI

    SEMI  shift, and go to state 145


State 136

   46 function: T IDENTIFIER LP RP statement .

    $default  reduce using rule 46 (function)


State 137

   45 for: K_FOR LP declaration SEMI b_expr SEMI . assignment RP statement

    IDENTIFIER  shift, and go to state 146

    assignment  go to state 147


State 138

    6 comstatement: K_SKIP SEMI .
   18 statement: K_SKIP SEMI .

    $end        reduce using rule 6 (comstatement)
    $end        [reduce using rule 18 (statement)]
    IDENTIFIER  reduce using rule 6 (comstatement)
    IDENTIFIER  [reduce using rule 18 (statement)]
    K_SKIP      reduce using rule 6 (comstatement)
    K_SKIP      [reduce using rule 18 (statement)]
    K_WHILE     reduce using rule 6 (comstatement)
    K_WHILE     [reduce using rule 18 (statement)]
    K_FOR       reduce using rule 6 (comstatement)
    K_FOR       [reduce using rule 18 (statement)]
    K_IF        reduce using rule 6 (comstatement)
    K_IF        [reduce using rule 18 (statement)]
    K_ELSE      reduce using rule 6 (comstatement)
    K_ELSE      [reduce using rule 18 (statement)]
    K_RETURN    reduce using rule 6 (comstatement)
    K_RETURN    [reduce using rule 18 (statement)]
    F_SCANF     reduce using rule 6 (comstatement)
    F_SCANF     [reduce using rule 18 (statement)]
    F_PRINTF    reduce using rule 6 (comstatement)
    F_PRINTF    [reduce using rule 18 (statement)]
    K_CONST     reduce using rule 6 (comstatement)
    K_CONST     [reduce using rule 18 (statement)]
    T_CHAR      reduce using rule 6 (comstatement)
    T_CHAR      [reduce using rule 18 (statement)]
    T_INT       reduce using rule 6 (comstatement)
    T_INT       [reduce using rule 18 (statement)]
    T_STRING    reduce using rule 6 (comstatement)
    T_STRING    [reduce using rule 18 (statement)]
    T_BOOL      reduce using rule 6 (comstatement)
    T_BOOL      [reduce using rule 18 (statement)]
    T_VOID      reduce using rule 6 (comstatement)
    T_VOID      [reduce using rule 18 (statement)]
    SEMI        reduce using rule 6 (comstatement)
    SEMI        [reduce using rule 18 (statement)]
    LC          reduce using rule 6 (comstatement)
    LC          [reduce using rule 18 (statement)]
    RC          reduce using rule 6 (comstatement)
    RC          [reduce using rule 18 (statement)]
    $default    reduce using rule 6 (comstatement)


State 139

   42 if_else: K_IF LP b_expr RP comstatement K_ELSE . comstatement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 122
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 123
    LC          shift, and go to state 16

    statements     go to state 124
    comstatement   go to state 148
    statement      go to state 19
    declaration    go to state 126
    assignment     go to state 127
    op_assignment  go to state 128
    printf         go to state 129
    scanf          go to state 130
    if_else        go to state 131
    while          go to state 132
    for            go to state 133
    function       go to state 134
    return         go to state 135
    T              go to state 30


State 140

    7 comstatement: declaration SEMI .
   19 statement: declaration SEMI .

    $end        reduce using rule 7 (comstatement)
    $end        [reduce using rule 19 (statement)]
    IDENTIFIER  reduce using rule 7 (comstatement)
    IDENTIFIER  [reduce using rule 19 (statement)]
    K_SKIP      reduce using rule 7 (comstatement)
    K_SKIP      [reduce using rule 19 (statement)]
    K_WHILE     reduce using rule 7 (comstatement)
    K_WHILE     [reduce using rule 19 (statement)]
    K_FOR       reduce using rule 7 (comstatement)
    K_FOR       [reduce using rule 19 (statement)]
    K_IF        reduce using rule 7 (comstatement)
    K_IF        [reduce using rule 19 (statement)]
    K_ELSE      reduce using rule 7 (comstatement)
    K_ELSE      [reduce using rule 19 (statement)]
    K_RETURN    reduce using rule 7 (comstatement)
    K_RETURN    [reduce using rule 19 (statement)]
    F_SCANF     reduce using rule 7 (comstatement)
    F_SCANF     [reduce using rule 19 (statement)]
    F_PRINTF    reduce using rule 7 (comstatement)
    F_PRINTF    [reduce using rule 19 (statement)]
    K_CONST     reduce using rule 7 (comstatement)
    K_CONST     [reduce using rule 19 (statement)]
    T_CHAR      reduce using rule 7 (comstatement)
    T_CHAR      [reduce using rule 19 (statement)]
    T_INT       reduce using rule 7 (comstatement)
    T_INT       [reduce using rule 19 (statement)]
    T_STRING    reduce using rule 7 (comstatement)
    T_STRING    [reduce using rule 19 (statement)]
    T_BOOL      reduce using rule 7 (comstatement)
    T_BOOL      [reduce using rule 19 (statement)]
    T_VOID      reduce using rule 7 (comstatement)
    T_VOID      [reduce using rule 19 (statement)]
    SEMI        reduce using rule 7 (comstatement)
    SEMI        [reduce using rule 19 (statement)]
    LC          reduce using rule 7 (comstatement)
    LC          [reduce using rule 19 (statement)]
    RC          reduce using rule 7 (comstatement)
    RC          [reduce using rule 19 (statement)]
    $default    reduce using rule 7 (comstatement)


State 141

    8 comstatement: assignment SEMI .
   20 statement: assignment SEMI .

    $end        reduce using rule 8 (comstatement)
    $end        [reduce using rule 20 (statement)]
    IDENTIFIER  reduce using rule 8 (comstatement)
    IDENTIFIER  [reduce using rule 20 (statement)]
    K_SKIP      reduce using rule 8 (comstatement)
    K_SKIP      [reduce using rule 20 (statement)]
    K_WHILE     reduce using rule 8 (comstatement)
    K_WHILE     [reduce using rule 20 (statement)]
    K_FOR       reduce using rule 8 (comstatement)
    K_FOR       [reduce using rule 20 (statement)]
    K_IF        reduce using rule 8 (comstatement)
    K_IF        [reduce using rule 20 (statement)]
    K_ELSE      reduce using rule 8 (comstatement)
    K_ELSE      [reduce using rule 20 (statement)]
    K_RETURN    reduce using rule 8 (comstatement)
    K_RETURN    [reduce using rule 20 (statement)]
    F_SCANF     reduce using rule 8 (comstatement)
    F_SCANF     [reduce using rule 20 (statement)]
    F_PRINTF    reduce using rule 8 (comstatement)
    F_PRINTF    [reduce using rule 20 (statement)]
    K_CONST     reduce using rule 8 (comstatement)
    K_CONST     [reduce using rule 20 (statement)]
    T_CHAR      reduce using rule 8 (comstatement)
    T_CHAR      [reduce using rule 20 (statement)]
    T_INT       reduce using rule 8 (comstatement)
    T_INT       [reduce using rule 20 (statement)]
    T_STRING    reduce using rule 8 (comstatement)
    T_STRING    [reduce using rule 20 (statement)]
    T_BOOL      reduce using rule 8 (comstatement)
    T_BOOL      [reduce using rule 20 (statement)]
    T_VOID      reduce using rule 8 (comstatement)
    T_VOID      [reduce using rule 20 (statement)]
    SEMI        reduce using rule 8 (comstatement)
    SEMI        [reduce using rule 20 (statement)]
    LC          reduce using rule 8 (comstatement)
    LC          [reduce using rule 20 (statement)]
    RC          reduce using rule 8 (comstatement)
    RC          [reduce using rule 20 (statement)]
    $default    reduce using rule 8 (comstatement)


State 142

    9 comstatement: op_assignment SEMI .
   21 statement: op_assignment SEMI .

    $end        reduce using rule 9 (comstatement)
    $end        [reduce using rule 21 (statement)]
    IDENTIFIER  reduce using rule 9 (comstatement)
    IDENTIFIER  [reduce using rule 21 (statement)]
    K_SKIP      reduce using rule 9 (comstatement)
    K_SKIP      [reduce using rule 21 (statement)]
    K_WHILE     reduce using rule 9 (comstatement)
    K_WHILE     [reduce using rule 21 (statement)]
    K_FOR       reduce using rule 9 (comstatement)
    K_FOR       [reduce using rule 21 (statement)]
    K_IF        reduce using rule 9 (comstatement)
    K_IF        [reduce using rule 21 (statement)]
    K_ELSE      reduce using rule 9 (comstatement)
    K_ELSE      [reduce using rule 21 (statement)]
    K_RETURN    reduce using rule 9 (comstatement)
    K_RETURN    [reduce using rule 21 (statement)]
    F_SCANF     reduce using rule 9 (comstatement)
    F_SCANF     [reduce using rule 21 (statement)]
    F_PRINTF    reduce using rule 9 (comstatement)
    F_PRINTF    [reduce using rule 21 (statement)]
    K_CONST     reduce using rule 9 (comstatement)
    K_CONST     [reduce using rule 21 (statement)]
    T_CHAR      reduce using rule 9 (comstatement)
    T_CHAR      [reduce using rule 21 (statement)]
    T_INT       reduce using rule 9 (comstatement)
    T_INT       [reduce using rule 21 (statement)]
    T_STRING    reduce using rule 9 (comstatement)
    T_STRING    [reduce using rule 21 (statement)]
    T_BOOL      reduce using rule 9 (comstatement)
    T_BOOL      [reduce using rule 21 (statement)]
    T_VOID      reduce using rule 9 (comstatement)
    T_VOID      [reduce using rule 21 (statement)]
    SEMI        reduce using rule 9 (comstatement)
    SEMI        [reduce using rule 21 (statement)]
    LC          reduce using rule 9 (comstatement)
    LC          [reduce using rule 21 (statement)]
    RC          reduce using rule 9 (comstatement)
    RC          [reduce using rule 21 (statement)]
    $default    reduce using rule 9 (comstatement)


State 143

   10 comstatement: printf SEMI .
   22 statement: printf SEMI .

    $end        reduce using rule 10 (comstatement)
    $end        [reduce using rule 22 (statement)]
    IDENTIFIER  reduce using rule 10 (comstatement)
    IDENTIFIER  [reduce using rule 22 (statement)]
    K_SKIP      reduce using rule 10 (comstatement)
    K_SKIP      [reduce using rule 22 (statement)]
    K_WHILE     reduce using rule 10 (comstatement)
    K_WHILE     [reduce using rule 22 (statement)]
    K_FOR       reduce using rule 10 (comstatement)
    K_FOR       [reduce using rule 22 (statement)]
    K_IF        reduce using rule 10 (comstatement)
    K_IF        [reduce using rule 22 (statement)]
    K_ELSE      reduce using rule 10 (comstatement)
    K_ELSE      [reduce using rule 22 (statement)]
    K_RETURN    reduce using rule 10 (comstatement)
    K_RETURN    [reduce using rule 22 (statement)]
    F_SCANF     reduce using rule 10 (comstatement)
    F_SCANF     [reduce using rule 22 (statement)]
    F_PRINTF    reduce using rule 10 (comstatement)
    F_PRINTF    [reduce using rule 22 (statement)]
    K_CONST     reduce using rule 10 (comstatement)
    K_CONST     [reduce using rule 22 (statement)]
    T_CHAR      reduce using rule 10 (comstatement)
    T_CHAR      [reduce using rule 22 (statement)]
    T_INT       reduce using rule 10 (comstatement)
    T_INT       [reduce using rule 22 (statement)]
    T_STRING    reduce using rule 10 (comstatement)
    T_STRING    [reduce using rule 22 (statement)]
    T_BOOL      reduce using rule 10 (comstatement)
    T_BOOL      [reduce using rule 22 (statement)]
    T_VOID      reduce using rule 10 (comstatement)
    T_VOID      [reduce using rule 22 (statement)]
    SEMI        reduce using rule 10 (comstatement)
    SEMI        [reduce using rule 22 (statement)]
    LC          reduce using rule 10 (comstatement)
    LC          [reduce using rule 22 (statement)]
    RC          reduce using rule 10 (comstatement)
    RC          [reduce using rule 22 (statement)]
    $default    reduce using rule 10 (comstatement)


State 144

   11 comstatement: scanf SEMI .
   23 statement: scanf SEMI .

    $end        reduce using rule 11 (comstatement)
    $end        [reduce using rule 23 (statement)]
    IDENTIFIER  reduce using rule 11 (comstatement)
    IDENTIFIER  [reduce using rule 23 (statement)]
    K_SKIP      reduce using rule 11 (comstatement)
    K_SKIP      [reduce using rule 23 (statement)]
    K_WHILE     reduce using rule 11 (comstatement)
    K_WHILE     [reduce using rule 23 (statement)]
    K_FOR       reduce using rule 11 (comstatement)
    K_FOR       [reduce using rule 23 (statement)]
    K_IF        reduce using rule 11 (comstatement)
    K_IF        [reduce using rule 23 (statement)]
    K_ELSE      reduce using rule 11 (comstatement)
    K_ELSE      [reduce using rule 23 (statement)]
    K_RETURN    reduce using rule 11 (comstatement)
    K_RETURN    [reduce using rule 23 (statement)]
    F_SCANF     reduce using rule 11 (comstatement)
    F_SCANF     [reduce using rule 23 (statement)]
    F_PRINTF    reduce using rule 11 (comstatement)
    F_PRINTF    [reduce using rule 23 (statement)]
    K_CONST     reduce using rule 11 (comstatement)
    K_CONST     [reduce using rule 23 (statement)]
    T_CHAR      reduce using rule 11 (comstatement)
    T_CHAR      [reduce using rule 23 (statement)]
    T_INT       reduce using rule 11 (comstatement)
    T_INT       [reduce using rule 23 (statement)]
    T_STRING    reduce using rule 11 (comstatement)
    T_STRING    [reduce using rule 23 (statement)]
    T_BOOL      reduce using rule 11 (comstatement)
    T_BOOL      [reduce using rule 23 (statement)]
    T_VOID      reduce using rule 11 (comstatement)
    T_VOID      [reduce using rule 23 (statement)]
    SEMI        reduce using rule 11 (comstatement)
    SEMI        [reduce using rule 23 (statement)]
    LC          reduce using rule 11 (comstatement)
    LC          [reduce using rule 23 (statement)]
    RC          reduce using rule 11 (comstatement)
    RC          [reduce using rule 23 (statement)]
    $default    reduce using rule 11 (comstatement)


State 145

   16 comstatement: return SEMI .
   28 statement: return SEMI .

    $end        reduce using rule 16 (comstatement)
    $end        [reduce using rule 28 (statement)]
    IDENTIFIER  reduce using rule 16 (comstatement)
    IDENTIFIER  [reduce using rule 28 (statement)]
    K_SKIP      reduce using rule 16 (comstatement)
    K_SKIP      [reduce using rule 28 (statement)]
    K_WHILE     reduce using rule 16 (comstatement)
    K_WHILE     [reduce using rule 28 (statement)]
    K_FOR       reduce using rule 16 (comstatement)
    K_FOR       [reduce using rule 28 (statement)]
    K_IF        reduce using rule 16 (comstatement)
    K_IF        [reduce using rule 28 (statement)]
    K_ELSE      reduce using rule 16 (comstatement)
    K_ELSE      [reduce using rule 28 (statement)]
    K_RETURN    reduce using rule 16 (comstatement)
    K_RETURN    [reduce using rule 28 (statement)]
    F_SCANF     reduce using rule 16 (comstatement)
    F_SCANF     [reduce using rule 28 (statement)]
    F_PRINTF    reduce using rule 16 (comstatement)
    F_PRINTF    [reduce using rule 28 (statement)]
    K_CONST     reduce using rule 16 (comstatement)
    K_CONST     [reduce using rule 28 (statement)]
    T_CHAR      reduce using rule 16 (comstatement)
    T_CHAR      [reduce using rule 28 (statement)]
    T_INT       reduce using rule 16 (comstatement)
    T_INT       [reduce using rule 28 (statement)]
    T_STRING    reduce using rule 16 (comstatement)
    T_STRING    [reduce using rule 28 (statement)]
    T_BOOL      reduce using rule 16 (comstatement)
    T_BOOL      [reduce using rule 28 (statement)]
    T_VOID      reduce using rule 16 (comstatement)
    T_VOID      [reduce using rule 28 (statement)]
    SEMI        reduce using rule 16 (comstatement)
    SEMI        [reduce using rule 28 (statement)]
    LC          reduce using rule 16 (comstatement)
    LC          [reduce using rule 28 (statement)]
    RC          reduce using rule 16 (comstatement)
    RC          [reduce using rule 28 (statement)]
    $default    reduce using rule 16 (comstatement)


State 146

   35 assignment: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 31


State 147

   45 for: K_FOR LP declaration SEMI b_expr SEMI assignment . RP statement

    RP  shift, and go to state 149


State 148

   42 if_else: K_IF LP b_expr RP comstatement K_ELSE comstatement .

    $default  reduce using rule 42 (if_else)


State 149

   45 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP . statement

    IDENTIFIER  shift, and go to state 1
    K_SKIP      shift, and go to state 2
    K_WHILE     shift, and go to state 3
    K_FOR       shift, and go to state 4
    K_IF        shift, and go to state 5
    K_RETURN    shift, and go to state 6
    F_SCANF     shift, and go to state 7
    F_PRINTF    shift, and go to state 8
    K_CONST     shift, and go to state 9
    T_CHAR      shift, and go to state 10
    T_INT       shift, and go to state 11
    T_STRING    shift, and go to state 12
    T_BOOL      shift, and go to state 13
    T_VOID      shift, and go to state 14
    SEMI        shift, and go to state 15
    LC          shift, and go to state 16

    statement      go to state 150
    declaration    go to state 20
    assignment     go to state 21
    op_assignment  go to state 22
    printf         go to state 23
    scanf          go to state 24
    if_else        go to state 25
    while          go to state 26
    for            go to state 27
    function       go to state 28
    return         go to state 29
    T              go to state 30


State 150

   45 for: K_FOR LP declaration SEMI b_expr SEMI assignment RP statement .

    $default  reduce using rule 45 (for)
