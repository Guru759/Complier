Nonterminals useless in grammar

    b_expr


Terminals unused in grammar

    TRUE
    FALSE
    K_DO
    K_FOR
    K_RETURN
    T_STRING
    LOP_EQ
    LOP_LT
    LOP_LE
    LOP_GT
    LOP_GE
    LOP_NE
    LOP_AND
    LOP_OR
    LOP_NOT
    LB
    RB
    LC
    RC
    BOOL
    COMMA
    MINUS
    PLUS


Rules useless in grammar

   31 b_expr: expr LOP_EQ expr
   32       | expr LOP_LT expr
   33       | expr LOP_LE expr
   34       | expr LOP_GT expr
   35       | expr LOP_GE expr
   36       | expr LOP_NE expr
   37       | b_expr LOP_AND b_expr
   38       | b_expr LOP_OR b_expr
   39       | b_expr LOP_NOT b_expr
   40       | TRUE
   41       | FALSE


Rules useless in parser due to conflicts

   14 assignment: T IDENTIFIER LOP_ASSIGN expr


State 49 conflicts: 1 reduce/reduce
State 55 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMI
    5          | K_SKIP SEMI
    6          | declaration SEMI
    7          | assignment SEMI
    8          | printf SEMI
    9          | scanf SEMI
   10          | if_else
   11          | while

   12 declaration: T IDENTIFIER LOP_ASSIGN expr
   13            | T IDENTIFIER

   14 assignment: T IDENTIFIER LOP_ASSIGN expr

   15 printf: F_PRINTF LP expr RP

   16 scanf: F_SCANF LP expr RP

   17 if_else: K_IF LP expr RP statement K_ELSE statement
   18        | K_IF LP expr RP statement

   19 while: K_WHILE LP expr RP statement

   20 expr: expr LOP_ADD expr
   21     | expr LOP_SUB expr
   22     | expr LOP_MUL expr
   23     | expr LOP_DIV expr
   24     | IDENTIFIER
   25     | INTEGER
   26     | CHAR
   27     | STRING

   28 T: T_INT
   29  | T_CHAR
   30  | T_BOOL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TRUE (258)
    FALSE (259)
    K_SKIP (260) 5
    K_WHILE (261) 19
    K_DO (262)
    K_FOR (263)
    K_IF (264) 17 18
    K_ELSE (265) 17
    K_RETURN (266)
    F_SCANF (267) 16
    F_PRINTF (268) 15
    T_CHAR (269) 29
    T_INT (270) 28
    T_STRING (271)
    T_BOOL (272) 30
    LOP_EQ (273)
    LOP_LT (274)
    LOP_LE (275)
    LOP_GT (276)
    LOP_GE (277)
    LOP_NE (278)
    LOP_ASSIGN (279) 12 14
    LOP_ADD (280) 20
    LOP_SUB (281) 21
    LOP_MUL (282) 22
    LOP_DIV (283) 23
    LOP_AND (284)
    LOP_OR (285)
    LOP_NOT (286)
    SEMI (287) 4 5 6 7 8 9
    LP (288) 15 16 17 18 19
    RP (289) 15 16 17 18 19
    LB (290)
    RB (291)
    LC (292)
    RC (293)
    IDENTIFIER (294) 12 13 14 24
    INTEGER (295) 25
    CHAR (296) 26
    BOOL (297)
    STRING (298) 27
    COMMA (299)
    MINUS (300)
    PLUS (301)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program (48)
        on left: 1
        on right: 0
    statements (49)
        on left: 2 3
        on right: 1 3
    statement (50)
        on left: 4 5 6 7 8 9 10 11
        on right: 2 3 17 18 19
    declaration (51)
        on left: 12 13
        on right: 6
    assignment (52)
        on left: 14
        on right: 7
    printf (53)
        on left: 15
        on right: 8
    scanf (54)
        on left: 16
        on right: 9
    if_else (55)
        on left: 17 18
        on right: 10
    while (56)
        on left: 19
        on right: 11
    expr (57)
        on left: 20 21 22 23 24 25 26 27
        on right: 12 14 15 16 17 18 19 20 21 22 23
    T (58)
        on left: 28 29 30
        on right: 12 13 14


State 0

    0 $accept: . program $end

    K_SKIP    shift, and go to state 1
    K_WHILE   shift, and go to state 2
    K_IF      shift, and go to state 3
    F_SCANF   shift, and go to state 4
    F_PRINTF  shift, and go to state 5
    T_CHAR    shift, and go to state 6
    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    SEMI      shift, and go to state 9

    program      go to state 10
    statements   go to state 11
    statement    go to state 12
    declaration  go to state 13
    assignment   go to state 14
    printf       go to state 15
    scanf        go to state 16
    if_else      go to state 17
    while        go to state 18
    T            go to state 19


State 1

    5 statement: K_SKIP . SEMI

    SEMI  shift, and go to state 20


State 2

   19 while: K_WHILE . LP expr RP statement

    LP  shift, and go to state 21


State 3

   17 if_else: K_IF . LP expr RP statement K_ELSE statement
   18        | K_IF . LP expr RP statement

    LP  shift, and go to state 22


State 4

   16 scanf: F_SCANF . LP expr RP

    LP  shift, and go to state 23


State 5

   15 printf: F_PRINTF . LP expr RP

    LP  shift, and go to state 24


State 6

   29 T: T_CHAR .

    $default  reduce using rule 29 (T)


State 7

   28 T: T_INT .

    $default  reduce using rule 28 (T)


State 8

   30 T: T_BOOL .

    $default  reduce using rule 30 (T)


State 9

    4 statement: SEMI .

    $default  reduce using rule 4 (statement)


State 10

    0 $accept: program . $end

    $end  shift, and go to state 25


State 11

    1 program: statements .
    3 statements: statements . statement

    K_SKIP    shift, and go to state 1
    K_WHILE   shift, and go to state 2
    K_IF      shift, and go to state 3
    F_SCANF   shift, and go to state 4
    F_PRINTF  shift, and go to state 5
    T_CHAR    shift, and go to state 6
    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    SEMI      shift, and go to state 9

    $default  reduce using rule 1 (program)

    statement    go to state 26
    declaration  go to state 13
    assignment   go to state 14
    printf       go to state 15
    scanf        go to state 16
    if_else      go to state 17
    while        go to state 18
    T            go to state 19


State 12

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 13

    6 statement: declaration . SEMI

    SEMI  shift, and go to state 27


State 14

    7 statement: assignment . SEMI

    SEMI  shift, and go to state 28


State 15

    8 statement: printf . SEMI

    SEMI  shift, and go to state 29


State 16

    9 statement: scanf . SEMI

    SEMI  shift, and go to state 30


State 17

   10 statement: if_else .

    $default  reduce using rule 10 (statement)


State 18

   11 statement: while .

    $default  reduce using rule 11 (statement)


State 19

   12 declaration: T . IDENTIFIER LOP_ASSIGN expr
   13            | T . IDENTIFIER
   14 assignment: T . IDENTIFIER LOP_ASSIGN expr

    IDENTIFIER  shift, and go to state 31


State 20

    5 statement: K_SKIP SEMI .

    $default  reduce using rule 5 (statement)


State 21

   19 while: K_WHILE LP . expr RP statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 36


State 22

   17 if_else: K_IF LP . expr RP statement K_ELSE statement
   18        | K_IF LP . expr RP statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 37


State 23

   16 scanf: F_SCANF LP . expr RP

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 38


State 24

   15 printf: F_PRINTF LP . expr RP

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 39


State 25

    0 $accept: program $end .

    $default  accept


State 26

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 27

    6 statement: declaration SEMI .

    $default  reduce using rule 6 (statement)


State 28

    7 statement: assignment SEMI .

    $default  reduce using rule 7 (statement)


State 29

    8 statement: printf SEMI .

    $default  reduce using rule 8 (statement)


State 30

    9 statement: scanf SEMI .

    $default  reduce using rule 9 (statement)


State 31

   12 declaration: T IDENTIFIER . LOP_ASSIGN expr
   13            | T IDENTIFIER .
   14 assignment: T IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 40

    $default  reduce using rule 13 (declaration)


State 32

   24 expr: IDENTIFIER .

    $default  reduce using rule 24 (expr)


State 33

   25 expr: INTEGER .

    $default  reduce using rule 25 (expr)


State 34

   26 expr: CHAR .

    $default  reduce using rule 26 (expr)


State 35

   27 expr: STRING .

    $default  reduce using rule 27 (expr)


State 36

   19 while: K_WHILE LP expr . RP statement
   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42
    LOP_MUL  shift, and go to state 43
    LOP_DIV  shift, and go to state 44
    RP       shift, and go to state 45


State 37

   17 if_else: K_IF LP expr . RP statement K_ELSE statement
   18        | K_IF LP expr . RP statement
   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42
    LOP_MUL  shift, and go to state 43
    LOP_DIV  shift, and go to state 44
    RP       shift, and go to state 46


State 38

   16 scanf: F_SCANF LP expr . RP
   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42
    LOP_MUL  shift, and go to state 43
    LOP_DIV  shift, and go to state 44
    RP       shift, and go to state 47


State 39

   15 printf: F_PRINTF LP expr . RP
   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42
    LOP_MUL  shift, and go to state 43
    LOP_DIV  shift, and go to state 44
    RP       shift, and go to state 48


State 40

   12 declaration: T IDENTIFIER LOP_ASSIGN . expr
   14 assignment: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 49


State 41

   20 expr: expr LOP_ADD . expr

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 50


State 42

   21 expr: expr LOP_SUB . expr

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 51


State 43

   22 expr: expr LOP_MUL . expr

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 52


State 44

   23 expr: expr LOP_DIV . expr

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    CHAR        shift, and go to state 34
    STRING      shift, and go to state 35

    expr  go to state 53


State 45

   19 while: K_WHILE LP expr RP . statement

    K_SKIP    shift, and go to state 1
    K_WHILE   shift, and go to state 2
    K_IF      shift, and go to state 3
    F_SCANF   shift, and go to state 4
    F_PRINTF  shift, and go to state 5
    T_CHAR    shift, and go to state 6
    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    SEMI      shift, and go to state 9

    statement    go to state 54
    declaration  go to state 13
    assignment   go to state 14
    printf       go to state 15
    scanf        go to state 16
    if_else      go to state 17
    while        go to state 18
    T            go to state 19


State 46

   17 if_else: K_IF LP expr RP . statement K_ELSE statement
   18        | K_IF LP expr RP . statement

    K_SKIP    shift, and go to state 1
    K_WHILE   shift, and go to state 2
    K_IF      shift, and go to state 3
    F_SCANF   shift, and go to state 4
    F_PRINTF  shift, and go to state 5
    T_CHAR    shift, and go to state 6
    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    SEMI      shift, and go to state 9

    statement    go to state 55
    declaration  go to state 13
    assignment   go to state 14
    printf       go to state 15
    scanf        go to state 16
    if_else      go to state 17
    while        go to state 18
    T            go to state 19


State 47

   16 scanf: F_SCANF LP expr RP .

    $default  reduce using rule 16 (scanf)


State 48

   15 printf: F_PRINTF LP expr RP .

    $default  reduce using rule 15 (printf)


State 49

   12 declaration: T IDENTIFIER LOP_ASSIGN expr .
   14 assignment: T IDENTIFIER LOP_ASSIGN expr .
   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42
    LOP_MUL  shift, and go to state 43
    LOP_DIV  shift, and go to state 44

    SEMI      reduce using rule 12 (declaration)
    SEMI      [reduce using rule 14 (assignment)]
    $default  reduce using rule 12 (declaration)


State 50

   20 expr: expr . LOP_ADD expr
   20     | expr LOP_ADD expr .
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    $default  reduce using rule 20 (expr)


State 51

   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   21     | expr LOP_SUB expr .
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr

    $default  reduce using rule 21 (expr)


State 52

   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   22     | expr LOP_MUL expr .
   23     | expr . LOP_DIV expr

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42

    $default  reduce using rule 22 (expr)


State 53

   20 expr: expr . LOP_ADD expr
   21     | expr . LOP_SUB expr
   22     | expr . LOP_MUL expr
   23     | expr . LOP_DIV expr
   23     | expr LOP_DIV expr .

    LOP_ADD  shift, and go to state 41
    LOP_SUB  shift, and go to state 42

    $default  reduce using rule 23 (expr)


State 54

   19 while: K_WHILE LP expr RP statement .

    $default  reduce using rule 19 (while)


State 55

   17 if_else: K_IF LP expr RP statement . K_ELSE statement
   18        | K_IF LP expr RP statement .

    K_ELSE  shift, and go to state 56

    K_ELSE    [reduce using rule 18 (if_else)]
    $default  reduce using rule 18 (if_else)


State 56

   17 if_else: K_IF LP expr RP statement K_ELSE . statement

    K_SKIP    shift, and go to state 1
    K_WHILE   shift, and go to state 2
    K_IF      shift, and go to state 3
    F_SCANF   shift, and go to state 4
    F_PRINTF  shift, and go to state 5
    T_CHAR    shift, and go to state 6
    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    SEMI      shift, and go to state 9

    statement    go to state 57
    declaration  go to state 13
    assignment   go to state 14
    printf       go to state 15
    scanf        go to state 16
    if_else      go to state 17
    while        go to state 18
    T            go to state 19


State 57

   17 if_else: K_IF LP expr RP statement K_ELSE statement .

    $default  reduce using rule 17 (if_else)
