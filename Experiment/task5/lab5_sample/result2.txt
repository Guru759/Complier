TreeNode!1
TreeNode!1
TreeNode!2
TreeNode!2
TreeNode!2
2addChild!2
2addChild!2
TreeNode!2
2addChild!2
TreeNode!3
TreeNode!3
TreeNode!3
3addChild!3
3addChild!3
2addSibling!3
TreeNode!4
TreeNode!4
TreeNode!4
4addChild!4
4addChild!4
2addSibling!4
TreeNode!5
TreeNode!5
TreeNode!5
5addChild!5
5addChild!5
2addSibling!5
TreeNode!6
TreeNode!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
TreeNode!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
TreeNode!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
TreeNode!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!6
6addChild!6
6addChild!6
TreeNode!7
TreeNode!7
TreeNode!7
7addChild!7
7addChild!7
TreeNode!8
TreeNode!8
TreeNode!8
8addChild!8
8addChild!8
7addSibling!8
TreeNode!9
TreeNode!9
TreeNode!9
9addChild!9
9addChild!9
7addSibling!9
TreeNode!10
TreeNode!10
TreeNode!10
10addChild!10
10addChild!10
7addSibling!10
TreeNode!11
TreeNode!11
11addChild!10
11addChild!11
TreeNode!11
TreeNode!11
11addChild!11
11addChild!11
TreeNode!11
11addChild!11
11addChild!11
TreeNode!12
TreeNode!12
TreeNode!12
12addChild!12
12addChild!12
TreeNode!13
TreeNode!13
TreeNode!13
13addChild!13
13addChild!13
12addSibling!13
TreeNode!11
11addChild!11
11addChild!12
7addSibling!11
TreeNode!6
6addChild!6
6addChild!7
2addSibling!6
TreeNode!1
1addChild!1
1addChild!1
1addChild!2
TreeNode!0
0addChild!1
genNodeId()!
TreeNode!888
id是啥：2
id是啥：3
id是啥：4
id是啥：5
id是啥：6
id是啥：7
id是啥：8
id是啥：9
id是啥：10
id是啥：11
id是啥：12
id是啥：13
id是啥：14
id是啥：15
id是啥：16
id是啥：17
id是啥：18
id是啥：19
id是啥：20
id是啥：21
id是啥：22
id是啥：23
id是啥：24
id是啥：25
id是啥：26
id是啥：27
id是啥：28
id是啥：29
id是啥：30
id是啥：31
id是啥：32
id是啥：33
id是啥：34
id是啥：35
id是啥：36
id是啥：37
id是啥：38
id是啥：39
id是啥：40
id是啥：41
id是啥：42
id是啥：43
id是啥：44
id是啥：45
id是啥：46
id是啥：47
id是啥：48
id是啥：49
id是啥：50
id是啥：51
id是啥：52
id是啥：53
id是啥：54
id是啥：55
id是啥：56
printAST()!
lno@0   @0   program  children: [@1  ]  
TreeNode!888
lno@1   @1   statement   children: [@2  @3  @4  @5  @6  @7  @8  ]  stmt: function
lno@1   @2   type type: void
lno@1   @3   variable varname: main
lno@2   @4   statement   children: [@9  @10  @11  ]  stmt: decl
lno@3   @5   statement   children: [@12  @13  ]  stmt: assign
lno@4   @6   statement   children: [@14  @15  ]  stmt: assign
lno@5   @7   statement   children: [@16  @17  ]  stmt: decl
lno@6   @8   statement   children: [@18  @19  @20  @21  @22  @23  ]  stmt: while
lno@2   @9   type type: int
lno@2   @10  variable varname: a
lno@2   @11  variable varname: s
lno@3   @12  variable varname: a
lno@3   @13  const type: int
lno@4   @14  variable varname: s
lno@4   @15  const type: int
lno@5   @16  type type: char
lno@5   @17  variable varname: ch
lno@6   @18  expression  children: [@24  @25  ]  optype: &&
lno@7   @19  statement   children: [@26  @27  ]  stmt: assign
lno@8   @20  statement   children: [@28  @29  ]  stmt: decl
lno@9   @21  statement   children: [@30  @31  ]  stmt: assign
lno@10  @22  statement   children: [@32  @33  @34  @35  ]  stmt: assign
lno@11  @23  statement   children: [@36  @37  @38  ]  stmt: if
lno@6   @24  expression  children: [@39  @40  ]  optype: ||
lno@6   @25  expression  children: [@52  @53  ]  optype: !
lno@7   @26  variable varname: a
lno@7   @27  const type: int
lno@8   @28  type type: int
lno@8   @29  variable varname: a
lno@9   @30  variable varname: a
lno@9   @31  const type: int
lno@10  @32  variable varname: s
lno@10  @33  variable varname: a
lno@11  @34  variable varname: s
lno@11  @35  const type: int
lno@11  @36  expression  children: [@43  @44  ]  optype: <
lno@12  @37  statement   children: [@45  @46  ]  stmt: decl
lno@13  @38  statement   children: [@47  @48  ]  stmt: assign
lno@6   @39  expression  children: [@49  @50  ]  optype: &&
lno@6   @40  expression  children: [@51  @52  @53  ]  optype: ==
lno@6   @52  const type: int
lno@6   @53  expression  children: [@54  @55  ]  optype: ==
lno@11  @43  expression  children: [@33  @34  @35  ]  optype: -
lno@11  @44  expression  children: [@34  @35  ]  optype: -
lno@12  @45  type type: int
lno@12  @46  variable varname: b
lno@13  @47  variable varname: b
lno@13  @48  const type: int
lno@6   @49  expression  children: [@0  @0  ]  optype: >
lno@6   @50  expression  children: [@0  @0  ]  optype: <=
lno@6   @51  expression  children: [@0  @0  ]  optype: %
lno@6   @52  const type: int
lno@6   @53  expression  children: [@54  @55  ]  optype: ==
lno@6   @54  variable varname: a
lno@6   @55  const type: int
